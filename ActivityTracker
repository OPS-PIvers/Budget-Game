<!-- ActivityTracker.html (Fixed) -->
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <?!= include('Stylesheet'); ?>
  </head>
  <body>
    <header class="app-header">
      <div class="header-content">
        <a href="<?= getScriptUrl() ?>" class="app-title">Budget Game Tracker</a>
        <div class="action-buttons">
          <button id="email-button" class="btn btn-outline">Send Daily Digest</button>
          <a href="<?= getScriptUrl() ?>?page=admin" class="btn btn-outline">Admin</a>
        </div>
      </div>
    </header>
    
    <nav class="nav-container">
      <div class="main-nav">
        <a href="<?= getScriptUrl() ?>" class="nav-link active">
          <svg class="nav-icon" viewBox="0 0 24 24">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"/>
            <path d="M18 9l-1.4-1.4-5.6 5.6-2.6-2.6L7 12l4 4z"/>
          </svg>
          Activity Tracker
        </a>
        <a href="<?= getScriptUrl() ?>?page=dashboard" class="nav-link">
          <svg class="nav-icon" viewBox="0 0 24 24">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"/>
            <path d="M9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
          </svg>
          Dashboard
        </a>
      </div>
    </nav>
    
    <div class="container main-content">
      <div class="scoreboard">
        <div class="score-box" id="daily-box">
          <h2>Today's Points</h2>
          <div class="score" id="daily-score">0</div>
          <div class="average">Daily Avg: <span id="daily-average">0</span></div>
        </div>
        
        <div class="score-box" id="weekly-box">
          <h2>Weekly Points</h2>
          <div class="score" id="weekly-score">0</div>
          <div class="average">Weekly Avg: <span id="weekly-average">0</span></div>
        </div>
      </div>
      
      <div class="selected-activities">
        <h3>Selected Activities</h3>
        <div id="selected-activities-list"></div>
      </div>
      
      <div class="activity-sections" id="activity-container">
        <!-- Will be populated via JavaScript -->
        <div class="loading">Loading activities...</div>
      </div>
      
      <div class="actions">
        <button id="submit-button" class="submit-btn">Submit Activities</button>
        <button id="reset-button" class="reset-btn">Reset Selections</button>
      </div>
      
      <div class="mobile-actions">
        <button id="mobile-email-button" class="btn btn-primary">Send Daily Digest</button>
        <a href="<?= getScriptUrl() ?>?page=admin" class="btn btn-outline">Admin</a>
      </div>

    </div>
    
    <div id="notification" class="notification hidden"></div>
    
    <script>
      // Global state
      let activityData = {}; // { pointValues: {...}, categories: {...} }
      let appCategories = []; // Stores category list from server
      let selectedActivities = new Set(); // Activities selected now but not submitted
      let currentDayPoints = 0; // Points logged by household today (before current selections)
      let weeklyPoints = 0; // Points logged by household this week (before current selections)

      // --- Flags and Temp Storage for Initialization ---
      let isActivityDataLoaded = false;
      let isTodayDataLoaded = false;
      let isWeekDataLoaded = false;
      let todayDataInternal = null; // Temporary store for today's data
      let weekDataInternal = null; // Temporary store for week's data

      // --- Define all functions first ---

      /**
       * Handles activity definitions AND category list received from the server.
       * Sets flag and tries to render the page if all data is ready.
       * @param {Object} response - The response object { activityData: { pointValues, categories }, categoriesList: Array<string> }.
       */
      function handleActivityData(response) {
        activityData = response?.activityData || { pointValues: {}, categories: {} };
        appCategories = response?.categoriesList || [];
        console.log("Activity data loaded. Categories:", appCategories.length);
        isActivityDataLoaded = true;
        tryRenderPage(); // Attempt to render the page
      }

      /**
       * Handles today's aggregated data (points, logged activities, household info).
       * Stores data, sets flag, and tries to render the page.
       * @param {Object} data - Object like { points, activities, householdId, householdName, members }.
       */
      function handleTodayData(data) {
        console.log("Today's data received:", data);
        todayDataInternal = data; // Store it temporarily
        isTodayDataLoaded = true;
        tryRenderPage(); // Attempt to render the page
      }

      /**
       * Handles current week's aggregated data.
       * Stores data, sets flag, and tries to render the page.
       * @param {Object} data - Object like { weeklyTotal, dailyAverage, weeklyAverage, ... }.
       */
       function handleWeekData(data) {
         console.log("Weekly data received:", data);
         weekDataInternal = data; // Store it temporarily
         isWeekDataLoaded = true;
         tryRenderPage(); // Attempt to render the page
       }

      /**
       * Central function called after each data fetch.
       * Checks if all required data is loaded, then processes it and renders the UI.
       */
      function tryRenderPage() {
        // Exit if not all data has arrived yet
        if (!isActivityDataLoaded || !isTodayDataLoaded || !isWeekDataLoaded) {
           console.log(`Waiting for data... Activity:${isActivityDataLoaded}, Today:${isTodayDataLoaded}, Week:${isWeekDataLoaded}`);
           return;
        }

        console.log("All initial data loaded. Processing and rendering page.");

        // --- Process Stored Data ---
        // Process Week Data first
        weeklyPoints = weekDataInternal?.weeklyTotal ?? 0;
        updateScoreDisplay('weekly-score', weeklyPoints);
        document.getElementById('daily-average').textContent = weekDataInternal?.dailyAverage ?? '0';
        document.getElementById('weekly-average').textContent = weekDataInternal?.weeklyAverage ?? '0';
        console.log("Weekly data processed. Initial weeklyPoints global:", weeklyPoints);

        // Process Today Data
        const data = todayDataInternal; // Use stored today data
        if (data.householdId && data.householdName) {
          displayHouseholdInfo(data);
        } else if (!data.householdId) {
          console.log("User not assigned to a household.");
        }

        currentDayPoints = data.points || 0;
        updateScoreDisplay('daily-score', currentDayPoints);
        console.log("Today's data processed. Initial currentDayPoints global:", currentDayPoints);

        // Determine activities already logged today
        const alreadyLoggedToday = new Set();
        if (data.activities && data.activities.length > 0) {
          data.activities.forEach(activity => {
            if (activity && activity.name) alreadyLoggedToday.add(activity.name);
          });
           console.log("Activities already logged today by household:", Array.from(alreadyLoggedToday));
        }

        // --- Render UI Components ---
        // Render sections now that all data is confirmed loaded and processed
        renderActivitySections(alreadyLoggedToday); // Uses globals activityData & appCategories

        // Update lists and totals based on the initial loaded state (no new selections yet)
        updateSelectedActivitiesList();
        updatePointTotals(); // Recalculates potential display based on globals

        // Enable buttons now that rendering is complete and data is available
        toggleSubmitButtons(false); // Initially disabled in initializeApp
         // Keep submit disabled if there are no selectable activities
         const selectableButtons = document.querySelectorAll('.activity-btn:not(.logged)');
         if (selectableButtons.length === 0) {
             document.getElementById('submit-button').disabled = true;
             document.getElementById('reset-button').disabled = true;
         } else {
              // Re-check submit button state based on current selections (should be empty initially)
             document.getElementById('submit-button').disabled = (selectedActivities.size === 0);
         }

      }


      /**
       * Renders activity buttons grouped by category.
       * Assumes `activityData` and `appCategories` globals are populated.
       * @param {Set<string>} [alreadyLoggedToday=new Set()] - A set of activity names already logged today.
       */
      function renderActivitySections(alreadyLoggedToday = new Set()) {
          const container = document.getElementById('activity-container');
          container.innerHTML = ''; // Clear loading message or previous render

          // Check if activity definitions are loaded
          if (!activityData || !activityData.pointValues || Object.keys(activityData.pointValues).length === 0) {
              container.innerHTML = '<p class="error-message">No activities defined. Please configure activities in the Admin panel.</p>';
              console.error("RenderSections called but activityData.pointValues is empty.");
              // Disable submit/reset if no activities defined
              document.getElementById('submit-button').disabled = true;
              document.getElementById('reset-button').disabled = true;
              return;
          }
          // Check if categories are loaded
          if (!appCategories || appCategories.length === 0) {
              container.innerHTML = '<p class="error-message">Error loading activity categories.</p>';
               console.error("RenderSections called but appCategories is empty.");
              // Disable submit/reset
              document.getElementById('submit-button').disabled = true;
              document.getElementById('reset-button').disabled = true;
              return;
          }

          // Group activities by category
          const categories = {};
          appCategories.forEach(cat => categories[cat] = []);
          for (const activity in activityData.pointValues) {
              const category = activityData.categories[activity] || 'Uncategorized';
              if (!categories[category]) categories[category] = [];
              categories[category].push({ name: activity, points: activityData.pointValues[activity] });
          }
          for (const category in categories) {
              categories[category].sort((a, b) => a.name.localeCompare(b.name));
          }

          // Create a section for each category based on appCategories order
          let hasSelectableActivities = false; // Flag to see if ANY button is clickable
          appCategories.forEach(categoryName => {
              if (categories[categoryName] && categories[categoryName].length > 0) {
                  const { sectionElement, hasSelectable } = createSectionElement(categoryName, categories[categoryName], alreadyLoggedToday);
                  container.appendChild(sectionElement);
                  if (hasSelectable) hasSelectableActivities = true;
              }
          });

          // Add 'Uncategorized' section if necessary
          if (categories['Uncategorized'] && categories['Uncategorized'].length > 0 && !appCategories.includes('Uncategorized')) {
              const { sectionElement, hasSelectable } = createSectionElement('Uncategorized', categories['Uncategorized'], alreadyLoggedToday);
              container.appendChild(sectionElement);
              if (hasSelectable) hasSelectableActivities = true;
          }

          // If absolutely no activities are selectable (all logged or none defined)
          if (!hasSelectableActivities && Object.keys(activityData.pointValues).length > 0) {
              if (container.innerHTML.trim() === '') {
                   container.innerHTML = '<p class="info-message">All available activities have been logged for today.</p>';
              } else {
                   console.log("All activities rendered are already logged.");
              }
               document.getElementById('submit-button').disabled = true;
               document.getElementById('reset-button').disabled = true;
          }
      }


       /**
        * Helper function to create a category section element.
        * @param {string} categoryName - The name of the category.
        * @param {Array<object>} activitiesInCategory - Array of activity objects.
        * @param {Set<string>} alreadyLoggedToday - Set of activities already logged today.
        * @returns {object} { sectionElement: HTMLElement, hasSelectable: boolean }
        */
       function createSectionElement(categoryName, activitiesInCategory, alreadyLoggedToday) {
            const section = document.createElement('div'); section.className = 'section';
            const header = document.createElement('div'); header.className = 'section-header';
            header.innerHTML = `<span>${categoryName}</span><span class="chevron">▼</span>`;
            header.addEventListener('click', toggleSection);
            const content = document.createElement('div'); content.className = 'section-content';
            let hasSelectable = false; // Track if any button in this section is clickable

            activitiesInCategory.forEach(activity => {
                const button = document.createElement('button');
                const points = activity.points; const isPositive = points >= 0; const pointsText = isPositive ? `+${points}` : points;
                button.className = `activity-btn ${isPositive ? 'positive' : 'negative'}`; button.textContent = `${activity.name} (${pointsText})`; button.dataset.activity = activity.name;

                if (selectedActivities.has(activity.name)) {
                    button.classList.add('selected');
                    hasSelectable = true; // It's selected now, so it was selectable
                    button.addEventListener('click', toggleActivity); // Add listener even if selected now
                } else if (alreadyLoggedToday.has(activity.name)) {
                    button.classList.add('logged'); button.disabled = true; button.title = "Already logged today by household";
                } else {
                    button.addEventListener('click', toggleActivity); // Add listener if not logged
                    hasSelectable = true; // This button is selectable
                }
                content.appendChild(button);
            });

            section.appendChild(header); section.appendChild(content);
            return { sectionElement: section, hasSelectable: hasSelectable }; // Return element and flag
       }


      /**
       * Toggles the visibility of an activity section.
       * @param {Event} event - The click event from the section header.
       */
      function toggleSection(event) {
        const section = event.currentTarget.parentElement;
        const content = section.querySelector('.section-content');
        const chevron = event.currentTarget.querySelector('.chevron');
        content.classList.toggle('collapsed');
        chevron.textContent = content.classList.contains('collapsed') ? '▶' : '▼';
      }

      /**
       * Toggles the selection state of an activity button.
       * Updates the `selectedActivities` set and UI.
       * @param {Event} event - The click event object.
       */
      function toggleActivity(event) {
        const button = event.currentTarget;
        const activityName = button.dataset.activity;

        if (button.classList.contains('logged') || button.disabled) return;

        if (selectedActivities.has(activityName)) {
          selectedActivities.delete(activityName);
          button.classList.remove('selected');
        } else {
          selectedActivities.add(activityName);
          button.classList.add('selected');
        }
        updateSelectedActivitiesList();
        updatePointTotals();
      }

      /**
       * Updates the list of currently selected (but not submitted) activities.
       */
      function updateSelectedActivitiesList() {
        const container = document.getElementById('selected-activities-list');
        container.innerHTML = '';
        if (selectedActivities.size === 0) {
          container.innerHTML = '<p>No activities selected for submission.</p>';
          return;
        }
        selectedActivities.forEach(activityName => {
          const points = activityData.pointValues[activityName] || 0;
          const isPositive = points >= 0;
          const div = document.createElement('div');
          div.className = `selected-activity ${isPositive ? 'positive' : 'negative'}`;
          const pointsText = isPositive ? `+${points}` : points;
          div.innerHTML = `<span>${activityName}</span><span>${pointsText}</span>`;
          container.appendChild(div);
        });
      }

      /**
       * Updates the displayed daily and weekly scores based on already logged points
       * PLUS the points from the currently selected (but not submitted) activities.
       */
      function updatePointTotals() {
        let pointsFromSelection = 0;
        selectedActivities.forEach(activityName => {
          pointsFromSelection += activityData.pointValues[activityName] || 0;
        });
        const potentialDailyTotal = currentDayPoints + pointsFromSelection;
        const potentialWeeklyTotal = weeklyPoints + pointsFromSelection;
        updateScoreDisplay('daily-score', potentialDailyTotal);
        updateScoreDisplay('weekly-score', potentialWeeklyTotal);
        // Only enable submit if something is selected AND there are selectable buttons available
        const hasSelectableButtons = document.querySelectorAll('.activity-btn:not(.logged)').length > 0;
        document.getElementById('submit-button').disabled = (selectedActivities.size === 0 || !hasSelectableButtons);
      }

      /**
       * Updates a score display element (text and class).
       * @param {string} elementId - The ID of the score element.
       * @param {number} points - The points value to display.
       */
      function updateScoreDisplay(elementId, points) {
        const element = document.getElementById(elementId);
        if (!element) return;
        element.textContent = points >= 0 ? `+${points}` : points;
        element.classList.remove('positive', 'negative');
        if (points > 0) element.classList.add('positive');
        else if (points < 0) element.classList.add('negative');
      }

      /**
       * Submits the currently selected activities to the server.
       */
      function submitActivities() {
        if (selectedActivities.size === 0) {
          showNotification('Please select at least one activity', true);
          return;
        }
        toggleSubmitButtons(true);
        const activitiesToSubmit = Array.from(selectedActivities);
        google.script.run
          .withSuccessHandler(handleSubmitSuccess)
          .withFailureHandler(handleSubmitError)
          .processWebAppSubmission(activitiesToSubmit);
      }

      /**
       * Handles the successful response after submitting activities.
       * Updates global points state and UI based on server response.
       * @param {Object} result - Server response { success, points, weeklyTotal, message, goalsUpdated?, activities? }.
       */
      function handleSubmitSuccess(result) {
          console.log("Submit Success Response:", result);
          toggleSubmitButtons(false); // Re-enable buttons first
          if (result.success) {
              let pointsAddedThisSubmission = 0;
              if(result.activities && Array.isArray(result.activities)) {
                  result.activities.forEach(act => { pointsAddedThisSubmission += act.points || 0; });
              } else { pointsAddedThisSubmission = result.points || 0; }

              currentDayPoints += pointsAddedThisSubmission;
              weeklyPoints = result.weeklyTotal ?? (weeklyPoints + pointsAddedThisSubmission); // Use server total!

              updateScoreDisplay('daily-score', currentDayPoints);
              updateScoreDisplay('weekly-score', weeklyPoints);

              if (result.goalsUpdated) {
                  console.log("Goals updated flag received.");
                  try { localStorage.setItem('refreshGoals', 'true'); localStorage.setItem('goalsUpdateTime', Date.now().toString()); } catch (e) { console.error("Error setting localStorage:", e); }
              }

              selectedActivities.clear(); // Clear selections *after* updating points

              // Re-fetch today's data to get updated list of logged activities & re-render sections
              isTodayDataLoaded = false; // Reset flag to allow re-rendering by tryRenderPage
              google.script.run.withSuccessHandler(handleTodayData).withFailureHandler(handleError).getTodayData(); // This eventually calls renderSections

              showNotification('Activities submitted successfully!');
          } else {
              showNotification('Error: ' + (result.message || 'Unknown error during submission'), true);
              console.error('Submission error from server:', result);
          }
      }

      /**
       * Handles errors during the submission process.
       * @param {Error} error - The error object from Apps Script.
       */
      function handleSubmitError(error) {
        toggleSubmitButtons(false);
        showNotification('Error: ' + error.message, true);
        console.error('Submission error:', error);
      }

      /**
       * Handles generic errors from server calls.
       * @param {Error} error - The error object.
       */
      function handleError(error) {
        console.error('Error:', error);
        showNotification('Error: ' + (error.message || 'Unknown error'), true);
        // Potentially re-enable buttons if a generic fetch failed
        toggleSubmitButtons(false);
        // Could add more specific error display here, e.g., in the activity container
        const container = document.getElementById('activity-container');
        if(container) container.innerHTML = `<p class="error-message">Failed to load data: ${error.message || 'Unknown error'}</p>`;
      }

      /**
       * Resets the current activity selections in the UI.
       */
      function resetSelections() {
        if (selectedActivities.size > 0) {
          selectedActivities.clear();
          // Re-fetch today's data to re-render sections correctly (unselect buttons, keep logged ones disabled)
          isTodayDataLoaded = false; // Reset flag
          google.script.run.withSuccessHandler(handleTodayData).withFailureHandler(handleError).getTodayData();
          // Update displayed totals back to state *before* selections
          updatePointTotals();
          showNotification('Selections cleared.');
        }
      }

      /**
       * Enables or disables the Submit and Reset buttons.
       * @param {boolean} disabled - True to disable, false to enable.
       */
      function toggleSubmitButtons(disabled) {
        const submitBtn = document.getElementById('submit-button');
        const resetBtn = document.getElementById('reset-button');
        if (submitBtn) submitBtn.disabled = disabled;
        if (resetBtn) resetBtn.disabled = disabled;
      }

      /**
       * Shows a temporary notification message at the bottom of the screen.
       * @param {string} message - The message to display.
       * @param {boolean} [isError=false] - If true, displays the message with an error style.
       */
      function showNotification(message, isError = false) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.backgroundColor = isError ? 'var(--negative-color)' : '#323232';
        notification.classList.remove('hidden');
        setTimeout(() => { notification.classList.add('hidden'); }, 3000);
      }

      /**
       * Sends the daily digest email via server call.
       */
      function sendDailyDigest() {
         const emailBtn = document.getElementById('email-button');
         const mobileEmailBtn = document.getElementById('mobile-email-button');
         if(emailBtn) emailBtn.disabled = true; if(mobileEmailBtn) mobileEmailBtn.disabled = true;
         if(emailBtn) emailBtn.textContent = 'Sending...'; if(mobileEmailBtn) mobileEmailBtn.textContent = 'Sending...';

         google.script.run
           .withSuccessHandler(function(result) {
             if(emailBtn) emailBtn.disabled = false; if(mobileEmailBtn) mobileEmailBtn.disabled = false;
             if(emailBtn) emailBtn.textContent = 'Send Daily Digest'; if(mobileEmailBtn) mobileEmailBtn.textContent = 'Send Daily Digest';
             showNotification(result.message || (result.success ? 'Digest sent.' : 'Failed to send.'), !result.success);
           })
           .withFailureHandler(function(error) {
             if(emailBtn) emailBtn.disabled = false; if(mobileEmailBtn) mobileEmailBtn.disabled = false;
             if(emailBtn) emailBtn.textContent = 'Send Daily Digest'; if(mobileEmailBtn) mobileEmailBtn.textContent = 'Send Daily Digest';
             handleError(error); // Use generic handler
           })
           .forceSendDailyDigest(); // Calls WebApp.gs function
       }

      /**
       * Displays household information at the top of the page.
       * @param {Object} data - Data object containing householdId, householdName, members.
       */
      function displayHouseholdInfo(data) {
        if (!data || !data.householdId || !data.householdName) {
            const existingInfo = document.getElementById('household-info'); if(existingInfo) existingInfo.remove(); return;
        }
        let householdInfo = document.getElementById('household-info');
        if (!householdInfo) {
          householdInfo = document.createElement('div'); householdInfo.id = 'household-info'; householdInfo.className = 'household-info';
          const scoreboard = document.querySelector('.scoreboard');
          if (scoreboard) { scoreboard.parentNode.insertBefore(householdInfo, scoreboard); }
          else { const mainContent = document.querySelector('.main-content'); if (mainContent) mainContent.prepend(householdInfo); }
        }
        let membersText = ''; if (data.members && data.members.length > 0) { membersText = `<div class="household-members">Members: ${data.members.join(', ')}</div>`; }
        householdInfo.innerHTML = `<div class="household-name"><span class="household-icon">🏠</span> ${data.householdName}</div>${membersText}`;
      }

      /**
       * Renders an error message when the user has no household (if required).
       */
      function displayNoHouseholdError() {
        const container = document.querySelector('.main-content'); if (!container) return;
        container.innerHTML = `<div class="no-household-error"><div class="error-icon">⚠️</div><h3>No Household Found</h3><p>You are not currently assigned to a household. Some features may be limited. Please contact the administrator if you should belong to a household.</p></div>`;
      }


      /**
       * Initializes the Activity Tracker application. Fetches necessary data from the server.
       */
      function initializeApp() {
        console.log("Initializing app...");
        toggleSubmitButtons(true); // Disable submit initially
        // Reset flags
        isActivityDataLoaded = false; isTodayDataLoaded = false; isWeekDataLoaded = false;
        todayDataInternal = null; weekDataInternal = null;

        // Fetch data in parallel - handlers will call tryRenderPage
        google.script.run.withSuccessHandler(handleWeekData).withFailureHandler(handleError).getWeekData();
        google.script.run.withSuccessHandler(handleActivityData).withFailureHandler(handleError).getWebAppActivityData();
        google.script.run.withSuccessHandler(handleTodayData).withFailureHandler(handleError).getTodayData();

        // Set up event listeners for static buttons
        document.getElementById('submit-button').addEventListener('click', submitActivities);
        document.getElementById('reset-button').addEventListener('click', resetSelections);
        document.getElementById('email-button').addEventListener('click', sendDailyDigest);
        const mobileEmailBtn = document.getElementById('mobile-email-button');
        if (mobileEmailBtn) { mobileEmailBtn.addEventListener('click', sendDailyDigest); }
      }

      // Initialize the app when the page loads
      document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
  </body>
</html>
