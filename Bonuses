// Bonuses.gs
/**
 * Bonuses and Streak Calculations for Budget Game v3 (Streamlined)
 * Handles streak point calculation.
 */

/**
 * Calculates the point multiplier and bonus points for an activity based on streak length.
 * Uses persistent thresholds and bonus points loaded by getCurrentStreakSettings().
 * @param {string} activityName The name of the activity.
 * @param {number} activityPoints The base points for the activity.
 * @return {object} { originalPoints, bonusPoints, totalPoints, streakLength, multiplier }
 */
function calculateStreakMultiplier(activityName, activityPoints) {
  // --- Load Current Streak Settings ---
  const currentSettings = getCurrentStreakSettings(); // From Utilities.gs
  // --- End Load ---

  // Get the current activity streaks
  let streakLength = 0;
  try {
    let streakData;
    const email = Session.getActiveUser().getEmail();
    const householdId = getUserHouseholdId(email); // From HouseholdManagement.gs

    if (CONFIG.HOUSEHOLD_SETTINGS.ENABLED && householdId && typeof trackActivityStreaksForHousehold === "function") {
        streakData = trackActivityStreaksForHousehold(householdId);
    } else if (typeof trackActivityStreaks === "function") {
       streakData = trackActivityStreaks();
    } else {
       Logger.log("Warning: No streak tracking function found in calculateStreakMultiplier.");
       streakData = { streaks: {}, buildingStreaks: {} };
    }
    streakLength = (streakData.streaks && streakData.streaks[activityName]) || (streakData.buildingStreaks && streakData.buildingStreaks[activityName]) || 0;

  } catch (e) {
     Logger.log(`Error getting streak data for ${activityName} in calculateStreakMultiplier: ${e}. Assuming 0 streak.`);
     streakLength = 0;
  }

  let bonusPoints = 0; // Flat bonus
  let multiplier = 1; // Base multiplier

  // Check thresholds from LOADED settings, highest first
  // Access via uppercase keys for consistency
  if (streakLength >= currentSettings.thresholds.MULTIPLIER) {
    multiplier = 2;
    bonusPoints = 0;
  } else if (streakLength >= currentSettings.thresholds.BONUS_2) {
    bonusPoints = currentSettings.bonusPoints.BONUS_2;
  } else if (streakLength >= currentSettings.thresholds.BONUS_1) {
    bonusPoints = currentSettings.bonusPoints.BONUS_1;
  }

  const totalPoints = (activityPoints * multiplier) + bonusPoints;

  return {
    originalPoints: activityPoints,
    bonusPoints: bonusPoints,
    totalPoints: totalPoints,
    streakLength: streakLength,
    multiplier: multiplier
  };
}

/**
 * Tracks activity streaks by analyzing past activity data from the Dashboard.
 * Returns objects detailing current building (2-day) and full (3+ day) streaks.
 * @return {object} { buildingStreaks: { activityName: 2 }, streaks: { activityName: days } }
 */
function trackActivityStreaks() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);
  const buildingStreaks = {}; // 2 days ending yesterday
  const fullStreaks = {};     // 3+ days, potentially including today
  const DEBUG_ACTIVITY = "Get 7+ hours of sleep"; // Example Debug Activity

  Logger.log("trackActivityStreaks (Global): Function started.");

  if (!dashboardSheet) {
    Logger.log("trackActivityStreaks (Global): Dashboard sheet not found. Returning empty streaks.");
    return { buildingStreaks, streaks: fullStreaks };
  }

  const lastRow = dashboardSheet.getLastRow();
  if (lastRow <= 1) {
     Logger.log("trackActivityStreaks (Global): No data on Dashboard to track streaks.");
     return { buildingStreaks, streaks: fullStreaks };
  }

  // Fetch Date (A) and Activities (C) from Dashboard
  const historyRange = Math.min(lastRow - 1, 60); // Fetch last 60 data rows (adjust as needed)
  const startFetchRow = Math.max(2, lastRow - historyRange + 1);
  const historyData = dashboardSheet.getRange(startFetchRow, 1, lastRow - startFetchRow + 1, 3).getValues(); // A:C
  Logger.log(`trackActivityStreaks (Global): Fetched ${historyData.length} rows from Dashboard.`);

  const activityData = getActivityDataCached(); // For checking if activity exists
  const activityDates = {}; // { activityName: Set{'YYYY-MM-DD', ... } }

  // Populate activityDates map
  historyData.forEach((row, index) => {
    const date = row[0];
    const activitiesStr = row[2] || ""; // Column C

    if (!(date instanceof Date) || date.getTime() === 0) return; // Skip invalid dates

    const formattedDate = formatDateYMD(date);

    if (activitiesStr) {
      const activitiesList = activitiesStr.split(", ");
      activitiesList.forEach(activityEntry => {
        // Use robust regex to extract name
        const match = activityEntry.match(/[âž•âž–]\s(.*?)\s*(?:\(ðŸ”¥\d+\))?\s*\(/);
        if (match && match[1]) {
          const activityName = match[1].trim();
          // Only track streaks for POSITIVE base activities known in Points Reference
          if (activityData.pointValues[activityName] !== undefined && activityData.pointValues[activityName] > 0) {
            if (!activityDates[activityName]) {
              activityDates[activityName] = new Set();
            }
            activityDates[activityName].add(formattedDate);
          }
        }
      });
    }
  });

   // Calculate streaks for each activity found
  const today = new Date();
  const formattedToday = formatDateYMD(today);

  for (const activityName in activityDates) {
    const dateSet = activityDates[activityName];
    const sortedDates = Array.from(dateSet).sort();

    if (sortedDates.length < 2) continue;

    let currentStreak = 0;
    let latestStreakLength = 0;
    let latestStreakEndDateStr = null;

     for(let i = sortedDates.length - 1; i >= 0; i--) {
        const currentDateStr = sortedDates[i];
        if (i === sortedDates.length - 1) {
           currentStreak = 1;
           latestStreakEndDateStr = currentDateStr;
        } else {
           const prevDateStrInLoop = sortedDates[i+1];
           const currentDateUTC = new Date(Date.UTC(parseInt(currentDateStr.substring(0,4)), parseInt(currentDateStr.substring(5,7))-1, parseInt(currentDateStr.substring(8,10))));
           const prevDateUTC = new Date(Date.UTC(parseInt(prevDateStrInLoop.substring(0,4)), parseInt(prevDateStrInLoop.substring(5,7))-1, parseInt(prevDateStrInLoop.substring(8,10))));
           const diffDays = (prevDateUTC - currentDateUTC) / (1000 * 60 * 60 * 24);
           if (diffDays === 1) {
              currentStreak++;
           } else {
              break;
           }
        }
     }
     latestStreakLength = currentStreak;

     if (latestStreakEndDateStr) {
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        const formattedYesterday = formatDateYMD(yesterday);

        if (latestStreakEndDateStr === formattedToday || latestStreakEndDateStr === formattedYesterday) {
           if (latestStreakLength >= 3) {
              fullStreaks[activityName] = latestStreakLength;
           } else if (latestStreakLength === 2 && latestStreakEndDateStr === formattedYesterday) {
               buildingStreaks[activityName] = 2;
           }
        }
     }
  }

  Logger.log(`trackActivityStreaks (Global) FINAL result: building=${Object.keys(buildingStreaks).length}, full=${Object.keys(fullStreaks).length}`);
  return { buildingStreaks, streaks: fullStreaks };
}

/**
 * Tracks activity streaks for a specific household by analyzing Dashboard data.
 * @param {string} householdId - The household ID
 * @return {Object} Object containing streaks { buildingStreaks: {}, streaks: {} }
 */
function trackActivityStreaksForHousehold(householdId) {
  const buildingStreaks = {}; // 2 days ending yesterday
  const fullStreaks = {};     // 3+ days, potentially including today
  const DEBUG_ACTIVITY = "Get 7+ hours of sleep"; // Example Debug Activity

  Logger.log(`trackActivityStreaksForHousehold: Started for ID ${householdId}.`);

  if (!householdId) {
    Logger.log("trackActivityStreaksForHousehold: No household ID provided. Falling back to global streaks.");
    return trackActivityStreaks(); // Fall back to regular function
  }

  const householdEmails = getHouseholdEmails(householdId);
  if (!householdEmails || householdEmails.length === 0) {
    Logger.log(`trackActivityStreaksForHousehold: No emails found for household ID ${householdId}. Returning empty.`);
    return { buildingStreaks, streaks: fullStreaks };
  }
  Logger.log(`trackActivityStreaksForHousehold: Tracking for members: ${householdEmails.join(', ')}`);

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);

  if (!dashboardSheet) {
    Logger.log("trackActivityStreaksForHousehold: Dashboard sheet not found.");
    return { buildingStreaks, streaks: fullStreaks };
  }

  const lastRow = dashboardSheet.getLastRow();
  if (lastRow <= 1) {
    Logger.log("trackActivityStreaksForHousehold: No data on Dashboard.");
    return { buildingStreaks, streaks: fullStreaks };
  }

  // Fetch Date (A), Activities (C), and Email (G)
  const historyRange = Math.min(lastRow - 1, 60); // Fetch recent rows
  const startFetchRow = Math.max(2, lastRow - historyRange + 1);
  const historyData = dashboardSheet.getRange(startFetchRow, 1, lastRow - startFetchRow + 1, 7).getValues(); // A:G
  Logger.log(`trackActivityStreaksForHousehold: Fetched ${historyData.length} rows from Dashboard.`);

  const activityData = getActivityDataCached();
  const activityDates = {}; // { activityName: Set{'YYYY-MM-DD', ... } }

  // Populate activityDates map, filtering by household email
  historyData.forEach((row) => {
    const date = row[0];
    const activitiesStr = row[2] || "";
    const rowEmail = row[6] || ""; // Email from Col G

    if (!(date instanceof Date) || date.getTime() === 0) return; // Skip invalid dates

    // Filter by household
    if (householdEmails.some(he => he.toLowerCase() === rowEmail.toLowerCase())) {
      const formattedDate = formatDateYMD(date);
      if (activitiesStr) {
        const activitiesList = activitiesStr.split(", ");
        activitiesList.forEach(activityEntry => {
          const match = activityEntry.match(/[âž•âž–]\s(.*?)\s*(?:\(ðŸ”¥\d+\))?\s*\(/);
          if (match && match[1]) {
            const activityName = match[1].trim();
            if (activityData.pointValues[activityName] !== undefined && activityData.pointValues[activityName] > 0) {
              if (!activityDates[activityName]) {
                activityDates[activityName] = new Set();
              }
              activityDates[activityName].add(formattedDate);
            }
          }
        });
      }
    }
  });

  // --- Calculate Streaks (Identical logic as global function) ---
  const today = new Date();
  const formattedToday = formatDateYMD(today);

  for (const activityName in activityDates) {
    const dateSet = activityDates[activityName];
    const sortedDates = Array.from(dateSet).sort();

    if (sortedDates.length < 2) continue;

    let currentStreak = 0;
    let latestStreakLength = 0;
    let latestStreakEndDateStr = null;

     for(let i = sortedDates.length - 1; i >= 0; i--) {
        const currentDateStr = sortedDates[i];
        if (i === sortedDates.length - 1) {
           currentStreak = 1;
           latestStreakEndDateStr = currentDateStr;
        } else {
           const prevDateStrInLoop = sortedDates[i+1];
           const currentDateUTC = new Date(Date.UTC(parseInt(currentDateStr.substring(0,4)), parseInt(currentDateStr.substring(5,7))-1, parseInt(currentDateStr.substring(8,10))));
           const prevDateUTC = new Date(Date.UTC(parseInt(prevDateStrInLoop.substring(0,4)), parseInt(prevDateStrInLoop.substring(5,7))-1, parseInt(prevDateStrInLoop.substring(8,10))));
           const diffDays = (prevDateUTC - currentDateUTC) / (1000 * 60 * 60 * 24);
           if (diffDays === 1) {
              currentStreak++;
           } else {
              break;
           }
        }
     }
     latestStreakLength = currentStreak;

     if (latestStreakEndDateStr) {
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        const formattedYesterday = formatDateYMD(yesterday);

        if (latestStreakEndDateStr === formattedToday || latestStreakEndDateStr === formattedYesterday) {
           if (latestStreakLength >= 3) {
              fullStreaks[activityName] = latestStreakLength;
           } else if (latestStreakLength === 2 && latestStreakEndDateStr === formattedYesterday) {
               buildingStreaks[activityName] = 2;
           }
        }
     }
  }
  // --- End Streak Calculation ---

  Logger.log(`trackActivityStreaksForHousehold FINAL result (Household ${householdId}): building=${Object.keys(buildingStreaks).length}, full=${Object.keys(fullStreaks).length}`);
  return { buildingStreaks, streaks: fullStreaks };
}


/**
 * Helper to calculate a summary object structure from a list of activities.
 * Used when a weekly sheet doesn't exist or for bonus calculation based on detailed list.
 * Moved from Bonuses.gs to DataProcessing.gs as it's more general processing.
 * @param {Array<object>} activities - Array from getWeekActivities { name, points, date, category }.
 * @param {object} activityData - Cached activity data {pointValues, categories}.
 * @return {object} Summary object { total, positive, negative, topActivity, topActivityCount, categories: { ... } }
 */
// function calculateSummaryFromActivities(activities, activityData) { ... } // MOVED to DataProcessing.gs


/**
 * Checks if the user qualifies for the weekly grad school alarm bonus.
 * Reads activity data from the Dashboard sheet for the current week.
 * **CONFIRM if this specific bonus is still needed.**
 * @return {object} { qualifies: boolean, count: number, bonusPoints: number }
 */
function checkGradSchoolAlarmBonus() {
  // *** If this bonus is NOT used, delete this function entirely. ***
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);
  const targetActivity = "Dedicated study/work block (e.g., Grad School)";
  const requiredCount = 5; // How many times needed per week
  const bonusPointsValue = 2; // Points awarded if qualified

  if (!dashboardSheet) {
     Logger.log("Dashboard sheet not found for Grad School Bonus check.");
     return { qualifies: false, count: 0, bonusPoints: 0 };
  }

   const activityData = getActivityDataCached();
   if (activityData.pointValues[targetActivity] === undefined) {
      Logger.log(`Grad school bonus check skipped: Target activity "${targetActivity}" not found in Points Reference.`);
      return { qualifies: false, count: 0, bonusPoints: 0 };
   }

  const today = new Date();
  const startOfWeek = getWeekStartDate(today);
  const endOfWeek = getWeekEndDate(today);
  const startDateStr = formatDateYMD(startOfWeek);
  const endDateStr = formatDateYMD(endOfWeek);

  let countThisWeek = 0;
  const lastRow = dashboardSheet.getLastRow();
  if (lastRow <= 1) return { qualifies: false, count: 0, bonusPoints: 0 };

  // Read Date (A) and Activities (C)
  const data = dashboardSheet.getRange(2, 1, lastRow - 1, 3).getValues(); // A2:C<lastRow>

  data.forEach(row => {
    const date = row[0];
    if (date instanceof Date) {
        const dateStr = formatDateYMD(date);
        if (dateStr >= startDateStr && dateStr <= endDateStr) {
            const activitiesStr = row[2] || "";
            // Use regex to count occurrences accurately, allowing for streak text
            const escapedName = targetActivity.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const regex = new RegExp(`[âž•âž–]\\s${escapedName}\\s(\\(ðŸ”¥\\d+\\))?\\s\\([+-]`, "g");
            const matches = activitiesStr.match(regex);
            if (matches) {
              countThisWeek += matches.length;
            }
        }
    }
  });

  const qualifies = countThisWeek >= requiredCount;
  const bonusPoints = qualifies ? bonusPointsValue : 0;

  Logger.log(`Grad School Bonus Check (Current Week): Count=${countThisWeek}, Qualifies=${qualifies}`);
  return { qualifies: qualifies, count: countThisWeek, bonusPoints: bonusPoints };
}


/**
 * DEBUG FUNCTION: Manually runs trackActivityStreaks or trackActivityStreaksForHousehold
 * and logs the result.
 */
function debugStreakCalculation() {
  // --- Configuration ---
  const TEST_HOUSEHOLD_ID = null; // SET TO a valid household ID string to test household, or null/"" to test global
  // -------------------

  Logger.log(`--- DEBUG: Running streak calculation manually (${TEST_HOUSEHOLD_ID ? `Household: ${TEST_HOUSEHOLD_ID}` : 'Global'}) ---`);
  try {
    // Clear cache before running to ensure fresh data
    CacheService.getScriptCache().remove('activityData');
    activityDataCache = null; // Clear script global cache too
    // Clear household caches if testing household
    if (TEST_HOUSEHOLD_ID) {
       CacheService.getScriptCache().remove(`household_members_${TEST_HOUSEHOLD_ID}`);
       const emails = getHouseholdEmails(TEST_HOUSEHOLD_ID); // Re-fetch emails after clear
       emails.forEach(email => CacheService.getScriptCache().remove(`household_${email.toLowerCase()}`));
    }
    Logger.log("Cleared relevant caches for debug run.");


    let streaks;
    if (TEST_HOUSEHOLD_ID && typeof trackActivityStreaksForHousehold === "function") {
        streaks = trackActivityStreaksForHousehold(TEST_HOUSEHOLD_ID);
    } else if (typeof trackActivityStreaks === "function") {
        streaks = trackActivityStreaks(); // Use the global one
    } else {
        Logger.log("ERROR: Appropriate streak function not found.");
        return;
    }

    Logger.log("--- DEBUG RESULT ---");
    Logger.log("Building Streaks: " + JSON.stringify(streaks.buildingStreaks || {}));
    Logger.log("Full Streaks: " + JSON.stringify(streaks.streaks || {}));
    Logger.log("--- DEBUG END ---");
  } catch (e) {
    Logger.log("--- DEBUG ERROR ---");
    Logger.log("Error: " + e);
    Logger.log("Stack: " + e.stack);
    Logger.log("--- DEBUG END ---");
  }
}
