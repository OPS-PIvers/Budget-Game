// Code.gs (Refactored - Main Entry Points & Event Handlers)
/**
 * Budget Game Apps Script - v3 (Streamlined)
 * Main script file containing core event handlers and menu setup.
 */

/**
 * Creates the main custom menu when the spreadsheet opens.
 * Reads configuration from CONFIG object.
 */
function onOpen() {
  var ui = SpreadsheetApp.getUi();

  ui.createMenu(CONFIG.MENU_NAME)
    // Daily operations
    .addItem('Send Daily Digest', 'forceSendDailyDigestMenu') // Wrapper in MenuActions.gs
    .addItem('Send Weekly Digest', 'forceSendWeeklyDigestMenu') // Wrapper in MenuActions.gs

    // Setup & Maintenance section
    .addSeparator()
    .addSubMenu(ui.createMenu('Setup & Maintenance')
      .addItem('Setup Dashboard Sheet', 'setupDashboardMenu') // Wrapper
      .addItem('Setup Points Reference Sheet', 'setupPointsReferenceMenu') // Wrapper
      .addItem('Setup Households Sheet', 'setupHouseholdsMenu') // Wrapper
      .addItem('Update Form From Points Reference', 'updateFormMenu') // Wrapper
      .addItem('Rebuild Dashboard From Form Responses', 'rebuildDashboardMenu') // Wrapper
      .addItem('Setup/Update All Triggers', 'setupAllTriggersMenu') // Wrapper
      .addItem('Debug: Calculate Streaks', 'debugStreakCalculationMenu') // Wrapper
      )
    .addToUi();
}

/**
 * Processes a Google Form submission event.
 * Logs data directly to the Dashboard sheet. Handles optional digest resend.
 * @param {GoogleAppsScript.Events.FormsOnFormSubmit} e The form submission event object.
 * @return {boolean} True if processed successfully, false otherwise.
 */
function processFormSubmission(e) {
  activityDataCache = null; // Reset script cache for this new execution run

  try {
    if (!e || !e.response) {
      Logger.log("processFormSubmission called without valid event object.");
      return false;
    }

    const formResponse = e.response;
    const itemResponses = formResponse.getItemResponses();
    const timestamp = formResponse.getTimestamp();
    // Try getting email, default to "Unknown" if form doesn't collect it
    const email = formResponse.getRespondentEmail ? formResponse.getRespondentEmail().trim() : "Unknown";

    Logger.log(`Processing form submission from ${email} at ${timestamp}`);

    let totalPoints = 0;
    const activitiesLogged = []; // Store { name, points, category, streakInfo }
    let resendDigest = false;

    const activityData = getActivityDataCached(); // Use cached data from DataProcessing.gs

    // Process item responses
    itemResponses.forEach(itemResponse => {
      const question = itemResponse.getItem().getTitle();
      const answer = itemResponse.getResponse();

      if (question === "Resend Daily Digest?") { // Check for specific question text
        if (answer === "Yes") {
          resendDigest = true;
          Logger.log("User requested daily digest resend via Google Form.");
        }
        return; // Skip processing this as an activity
      }

      // Process checkbox or other multi-select answers
      if (Array.isArray(answer)) {
        answer.forEach(selectedOption => {
          if (selectedOption) { // Ensure option is not empty
             // processActivityWithPoints is in DataProcessing.gs
             const result = processActivityWithPoints(String(selectedOption).trim(), activityData);
             totalPoints += result.points;
             if (result.name) activitiesLogged.push(result);
          }
        });
      } else if (answer && typeof answer === 'string' && answer.trim() !== 'Yes' && answer.trim() !== 'No') {
        // Process single answer, skip if it's just "Yes" or "No" from other questions
        const result = processActivityWithPoints(String(answer).trim(), activityData);
        totalPoints += result.points;
        if (result.name) activitiesLogged.push(result);
      }
    });

    Logger.log(`Processed ${activitiesLogged.length} activities. Total points: ${totalPoints}.`);

    // Perform updates using try/catch for each step
    try {
      // updateDashboard is in DataProcessing.gs
      updateDashboard(timestamp, email, activitiesLogged, totalPoints);
      Logger.log("Dashboard updated via Google Form submission.");
    } catch (dashError) {
      Logger.log(`ERROR updating dashboard via Google Form: ${dashError}\nStack: ${dashError.stack}`);
    }

    // Send digest if requested
    if (resendDigest) {
      try {
        // sendDailyDigest is in EmailService.gs
        const digestSent = sendDailyDigest();
        Logger.log(`Daily digest resend attempt via Google Form: ${digestSent ? 'Success' : 'Failed'}`);
      } catch (digestError) {
        Logger.log(`ERROR resending daily digest via Google Form: ${digestError}\nStack: ${digestError.stack}`);
      }
    }

    return true; // Indicate overall processing attempted

  } catch (error) {
    Logger.log(`CRITICAL ERROR in processFormSubmission: ${error}`);
    Logger.log(`Stack: ${error.stack}`);
    return false;
  } finally {
     activityDataCache = null; // Clear cache again just in case
  }
}


/**
 * Handles edits made directly to the Points Reference sheet.
 * Updates the Google Form after a short delay if a row seems complete.
 * Clears activity data cache.
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e The edit event object.
 */
function handlePointsReferenceEdit(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const sheetName = sheet.getName();
    const pointsRefSheetName = CONFIG.SHEET_NAMES.POINTS_REFERENCE;

    if (sheetName === pointsRefSheetName) {
      const range = e.range;
      const row = range.getRow();

      // Ignore header row edits
      if (row === 1) return;

      // Check if the edited row seems complete (basic check)
      const activityRange = sheet.getRange(row, 1, 1, 3); // A:C for the edited row
      const values = activityRange.getValues()[0];
      const hasActivity = values[0] && String(values[0]).trim() !== "";
      const hasPoints = values[1] !== "" && !isNaN(values[1]);
      const hasCategory = values[2] && String(values[2]).trim() !== "" && CONFIG.CATEGORIES.includes(String(values[2]).trim());

      if (hasActivity && hasPoints && hasCategory) {
        Logger.log(`Complete row edit detected in ${pointsRefSheetName} at row ${row}. Scheduling form update and cache clear.`);
        // Add a delay to allow for multiple quick edits before updating
        Utilities.sleep(CONFIG.POINTS_EDIT_DELAY_MS);

        // Clear the cache *before* updating the form (form update reads fresh data)
        activityDataCache = null; // Script global cache
        CacheService.getScriptCache().remove('activityData'); // Service cache
        Logger.log("Cleared activity data cache due to Points Reference edit.");

        // Update the form (function is in FormSync.gs)
        updateFormFromSheet();

      } else {
         Logger.log(`Incomplete edit detected in ${pointsRefSheetName} at row ${row}. Form not updated yet.`);
      }
    }
  } catch (err) {
     Logger.log(`ERROR in handlePointsReferenceEdit: ${err}\nStack: ${err.stack}`);
  }
}

/**
 * Handles edits made directly to the Form Responses sheet.
 * Triggers a full rebuild of the Dashboard sheet.
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e The edit event object.
 */
function handleFormResponsesEdit(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const sheetName = sheet.getName();
    const responsesSheetName = CONFIG.SHEET_NAMES.FORM_RESPONSES;

    // Check if the edit occurred in the configured responses sheet
    if (sheetName === responsesSheetName) {
      // Trigger rebuild on significant changes (EDIT, INSERT_ROW, REMOVE_ROW)
      // Be cautious with EDIT, as simple formatting changes might trigger it unnecessarily.
      // Consider only triggering on REMOVE_ROW or INSERT_ROW if EDIT becomes problematic.
      if (e.changeType === 'REMOVE_ROW' || e.changeType === 'INSERT_ROW' || e.changeType === 'EDIT') {
         Logger.log(`Edit (${e.changeType}) detected in ${responsesSheetName}. Triggering Dashboard rebuild.`);
         SpreadsheetApp.getActiveSpreadsheet().toast(`Detected edit in ${responsesSheetName}. Rebuilding Dashboard...`, 'Rebuilding Data', 10);
         // Add a small delay to let Sheets catch up
         Utilities.sleep(1500);
         // rebuildAllFromFormResponses is in DataProcessing.gs
         const rebuildResult = rebuildAllFromFormResponses();
         if (rebuildResult) {
            Logger.log("Dashboard rebuild completed successfully after Form Responses edit.");
            SpreadsheetApp.getActiveSpreadsheet().toast("Dashboard rebuild complete.", 'Success', 5);
         } else {
            Logger.log("Dashboard rebuild failed after Form Responses edit.");
            SpreadsheetApp.getUi().alert("Dashboard rebuild failed after editing Form Responses. Check logs.");
         }
      }
    }
  } catch (error) {
    Logger.log(`Error in handleFormResponsesEdit: ${error}\nStack: ${error.stack}`);
  }
}
