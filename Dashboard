<!-- Dashboard.html (Fixed) -->
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <?!= include('Stylesheet'); ?>
  </head>
  <body>
    <header class="app-header">
      <div class="header-content">
        <a href="<?= getScriptUrl() ?>" class="app-title">Budget Game Tracker</a>
        <div class="action-buttons">
          <button id="email-button" class="btn btn-outline">Send Daily Digest</button>
          <a href="<?= getScriptUrl() ?>?page=admin" class="btn btn-outline">Admin</a>
        </div>
      </div>
    </header>
    
    <nav class="nav-container">
      <div class="main-nav">
        <a href="<?= getScriptUrl() ?>" class="nav-link">
          <svg class="nav-icon" viewBox="0 0 24 24">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"/>
            <path d="M18 9l-1.4-1.4-5.6 5.6-2.6-2.6L7 12l4 4z"/>
          </svg>
          Activity Tracker
        </a>
        <a href="<?= getScriptUrl() ?>?page=dashboard" class="nav-link active">
          <svg class="nav-icon" viewBox="0 0 24 24">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"/>
            <path d="M9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
          </svg>
          Dashboard
        </a>
      </div>
    </nav>
    
    <div class="container main-content">
      <div class="dashboard-section">
        <h3>Points Trend</h3>
        <div class="chart-container">
          <canvas id="points-chart"></canvas>
        </div>
      </div>
      
      <div class="dashboard-section">
        <h3>Weekly Performance</h3>
        <div class="chart-container">
          <canvas id="weekly-chart"></canvas>
        </div>
      </div>
      
      <div class="dashboard-row">
        <div class="dashboard-section half">
          <h3>Daily Distribution</h3>
          <div class="chart-container">
            <canvas id="daily-distribution-chart"></canvas>
          </div>
        </div>
        
        <div class="dashboard-section half">
          <h3>Positive vs Negative</h3>
          <div class="chart-container">
            <canvas id="activity-ratio-chart"></canvas>
          </div>
        </div>
      </div>
      
      <div class="dashboard-section">
        <h3>Activity Streaks</h3>
        <div class="streaks-container" id="streaks-container">
          <p>Loading streak data...</p>
        </div>
      </div>
      <div class="dashboard-section">
        <h3>Weekly Goals</h3>
        <div id="weekly-goals-container">
          <p class="loading">Loading weekly goals data...</p>
        </div>
      </div>
      <div class="dashboard-section">
        <h3>Lifetime Activity Frequency</h3>
        <div class="chart-container" id="lifetime-chart-container">
          <canvas id="lifetime-activity-chart"></canvas>
        </div>
      </div>

      <div class="dashboard-section">
        <h3>Previous Week Activity Frequency</h3>
        <div class="chart-container" id="prev-week-chart-container">
          <canvas id="prev-week-activity-chart"></canvas>
        </div>
      </div>
      <!-- ADD THE GOAL HISTORY SECTION HERE -->
      <div class="dashboard-section">
        <h3>Goal Achievement History</h3>
        <div id="goal-history-container">
          <p class="loading">Loading goal history data...</p>
        </div>
      </div>
        
        <!-- Mobile actions at the bottom -->
        <div class="mobile-actions">
          <button id="mobile-email-button" class="btn btn-primary">Send Daily Digest</button>
          <a href="<?= getScriptUrl() ?>?page=admin" class="btn btn-outline">Admin</a>
        </div>
      </div>
    </div>
    
    <div id="notification" class="notification hidden"></div>
    
    <!-- Load Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    
    <script>
      // Global variables
      let charts = {}; // Store chart instances
      
      // Wait for DOM and Chart.js to be fully loaded
      document.addEventListener('DOMContentLoaded', function() {
        // Wait a moment to ensure Chart.js is loaded
        setTimeout(initializeDashboard, 100);
      });
      
      /**
       * Initializes the dashboard with all data and visualizations
       */
      function initializeDashboard() {
        console.log("Initializing dashboard...");
        
        // Check if we need to refresh goals (set by ActivityTracker)
        const refreshGoals = localStorage.getItem('refreshGoals') === 'true';
        const goalsUpdateTime = localStorage.getItem('goalsUpdateTime');
        
        if (refreshGoals) {
          console.log("Goals refresh flag detected, clearing flag");
          localStorage.removeItem('refreshGoals');
          
          // Only keep update time for debugging
          if (goalsUpdateTime) {
            const updateTimeAgo = Math.round((Date.now() - parseInt(goalsUpdateTime)) / 1000);
            console.log(`Goals were flagged for update ${updateTimeAgo} seconds ago`);
          }
        }
        
        // Load historical chart data for visualizations
        loadDashboardData();
        
        // Load weekly goals data (with priority if refresh flag was set)
        if (refreshGoals) {
          // Load immediately if refresh flagged
          loadWeeklyGoals();
        } else {
          // Otherwise load after a short delay to prioritize chart loading
          setTimeout(loadWeeklyGoals, 100);
        }
        
        // Add this line to load goal history data
        loadGoalHistory();
        
        // Set up email button functionality
        document.getElementById('email-button').addEventListener('click', sendDailyDigest);
        
        // Mobile email button (if exists in the template)
        const mobileEmailBtn = document.getElementById('mobile-email-button');
        if (mobileEmailBtn) {
          mobileEmailBtn.addEventListener('click', sendDailyDigest);
        }
        
        // Poll for goal updates every minute (in case multiple windows are open)
        // This ensures goal displays stay in sync across multiple open dashboard tabs
        setInterval(function() {
          const refreshGoals = localStorage.getItem('refreshGoals') === 'true';
          if (refreshGoals) {
            console.log("Goals refresh detected during polling");
            localStorage.removeItem('refreshGoals');
            loadWeeklyGoals();
          }
        }, 60000); // Check every minute
      }

      function loadDashboardData() {
        // Show loading state in each chart container
        document.querySelectorAll('.chart-container').forEach(container => {
          // Make sure canvas exists and has proper dimensions
          const canvas = container.querySelector('canvas');
          if (canvas) {
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
          } else {
            console.warn('Canvas element missing in chart container');
          }
          
          // Add loading indicator
          const loading = document.createElement('div');
          loading.className = 'loading';
          loading.textContent = 'Loading chart data...';
          container.appendChild(loading);
        });
        
        // Load historical data
        google.script.run
          .withSuccessHandler(renderDashboard)
          .withFailureHandler(handleDashboardError)
          .getHistoricalData();
      }
      
      function renderDashboard(data) {
        if (!data.success) {
          showNotification('Error loading dashboard data');
          return;
        }
        
        // Clear loading indicators
        document.querySelectorAll('.chart-container .loading').forEach(loading => {
          loading.remove();
        });
        
        try {
          // Render charts
          renderPointsChart(data.dailyData, data.movingAverages);
          renderWeeklyChart(data.weeklyData);
          renderDailyDistributionChart(data.weeklyData);
          renderActivityRatioChart(data.weeklyData);
          
          // Render streaks
          renderStreaks(data.streakData);
          
          // Render the new activity frequency charts
          renderActivityFrequencyChart('lifetime-activity-chart', data.lifetimeActivityCounts, 'Lifetime');
          renderActivityFrequencyChart('prev-week-activity-chart', data.prevWeekActivityCounts, 'Previous Week');
        } catch (error) {
          console.error('Error rendering charts:', error);
          showNotification('Error rendering charts: ' + error.message);
        }
      }
      function renderPointsChart(dailyData, movingAverages) {
        if (!dailyData || dailyData.length === 0) {
          showChartError('points-chart', 'No daily data available');
          return;
        }
        
        const canvas = document.getElementById('points-chart');
        if (!canvas) {
          console.error('Canvas element "points-chart" not found!');
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error('Could not get 2D context for "points-chart"');
          return;
        }
        
        // Prepare data
        const dates = dailyData.map(day => day.displayDate);
        const points = dailyData.map(day => day.points);
        const averages = movingAverages.map(avg => avg.average);
        
        // Create chart
        if (charts.pointsChart) {
          charts.pointsChart.destroy(); // Destroy existing chart
        }
        
        charts.pointsChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [
              {
                label: 'Daily Points',
                data: points,
                backgroundColor: 'rgba(66, 133, 244, 0.2)',
                borderColor: 'rgba(66, 133, 244, 1)',
                borderWidth: 2,
                pointRadius: 3,
                tension: 0.1
              },
              {
                label: '7-Day Moving Average',
                data: averages,
                borderColor: 'rgba(234, 67, 53, 1)',
                borderWidth: 2,
                borderDash: [5, 5],
                pointRadius: 0,
                fill: false
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                }
              },
              x: {
                grid: {
                  display: false
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Daily Points Trend'
              },
              tooltip: {
                mode: 'index',
                intersect: false
              }
            }
          }
        });
      }
      
      function renderWeeklyChart(weeklyData) {
        if (!weeklyData || weeklyData.length === 0) {
          showChartError('weekly-chart', 'No weekly data available');
          return;
        }
        
        const canvas = document.getElementById('weekly-chart');
        if (!canvas) {
          console.error('Canvas element "weekly-chart" not found!');
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error('Could not get 2D context for "weekly-chart"');
          return;
        }
        
        // Prepare data
        const weeks = weeklyData.map(week => week.displayDate);
        const points = weeklyData.map(week => week.totalPoints);
        
        // Calculate trend line (simple moving average)
        const trendPoints = [];
        const window = Math.min(2, Math.floor(points.length / 2)); // 2-week moving average, or less if not enough data
        
        for (let i = 0; i < points.length; i++) {
          if (i < window - 1) {
            trendPoints.push(null); // Not enough data for trend
          } else {
            // Calculate average of current window
            let sum = 0;
            for (let j = 0; j < window; j++) {
              sum += points[i - j];
            }
            trendPoints.push(sum / window);
          }
        }
        
        // Create chart
        if (charts.weeklyChart) {
          charts.weeklyChart.destroy(); // Destroy existing chart
        }
        
        charts.weeklyChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: weeks,
            datasets: [
              {
                label: 'Weekly Points',
                data: points,
                backgroundColor: function(context) {
                  const value = context.dataset.data[context.dataIndex];
                  return value >= 0 ? 'rgba(52, 168, 83, 0.7)' : 'rgba(234, 67, 53, 0.7)';
                },
                borderColor: function(context) {
                  const value = context.dataset.data[context.dataIndex];
                  return value >= 0 ? 'rgba(52, 168, 83, 1)' : 'rgba(234, 67, 53, 1)';
                },
                borderWidth: 1
              },
              {
                label: 'Trend',
                data: trendPoints,
                type: 'line',
                borderColor: 'rgba(251, 188, 5, 1)',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                borderWidth: 2,
                pointRadius: 0,
                tension: 0.1
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                }
              },
              x: {
                grid: {
                  display: false
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Weekly Performance'
              }
            }
          }
        });
      }
      
      function renderDailyDistributionChart(weeklyData) {
        if (!weeklyData || weeklyData.length === 0) {
          showChartError('daily-distribution-chart', 'No weekly data available');
          return;
        }
        
        const canvas = document.getElementById('daily-distribution-chart');
        if (!canvas) {
          console.error('Canvas element "daily-distribution-chart" not found!');
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error('Could not get 2D context for "daily-distribution-chart"');
          return;
        }
        
        // Calculate average points per day of week
        const dayTotals = {
          sunday: 0, monday: 0, tuesday: 0, wednesday: 0,
          thursday: 0, friday: 0, saturday: 0
        };
        
        const dayCounts = {
          sunday: 0, monday: 0, tuesday: 0, wednesday: 0,
          thursday: 0, friday: 0, saturday: 0
        };
        
        weeklyData.forEach(week => {
          const breakdown = week.dailyBreakdown;
          for (const day in breakdown) {
            if (breakdown[day] !== 0) {
              dayTotals[day] += breakdown[day];
              dayCounts[day]++;
            }
          }
        });
        
        const dayAverages = {};
        for (const day in dayTotals) {
          dayAverages[day] = dayCounts[day] > 0 ? dayTotals[day] / dayCounts[day] : 0;
        }
        
        // Prepare data
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
        const averages = dayKeys.map(day => dayAverages[day]);
        
        // Create chart
        if (charts.dailyDistributionChart) {
          charts.dailyDistributionChart.destroy(); // Destroy existing chart
        }
        
        charts.dailyDistributionChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: days,
            datasets: [{
              label: 'Average Points',
              data: averages,
              backgroundColor: averages.map(value => 
                value >= 0 ? 'rgba(52, 168, 83, 0.7)' : 'rgba(234, 67, 53, 0.7)'
              ),
              borderColor: averages.map(value => 
                value >= 0 ? 'rgba(52, 168, 83, 1)' : 'rgba(234, 67, 53, 1)'
              ),
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                }
              },
              x: {
                grid: {
                  display: false
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Points by Day of Week'
              }
            }
          }
        });
      }
      
      function renderActivityRatioChart(weeklyData) {
        if (!weeklyData || weeklyData.length === 0) {
          showChartError('activity-ratio-chart', 'No weekly data available');
          return;
        }
        
        const canvas = document.getElementById('activity-ratio-chart');
        if (!canvas) {
          console.error('Canvas element "activity-ratio-chart" not found!');
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error('Could not get 2D context for "activity-ratio-chart"');
          return;
        }
        
        // Calculate total positive and negative activities
        let totalPositive = 0;
        let totalNegative = 0;
        
        weeklyData.forEach(week => {
          totalPositive += week.positiveCount || 0;
          totalNegative += week.negativeCount || 0;
        });
        
        // Check if we have any data
        if (totalPositive === 0 && totalNegative === 0) {
          showChartError('activity-ratio-chart', 'No activity data available');
          return;
        }
        
        // Create chart
        if (charts.activityRatioChart) {
          charts.activityRatioChart.destroy(); // Destroy existing chart
        }
        
        charts.activityRatioChart = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: ['Positive', 'Negative'],
            datasets: [{
              data: [totalPositive, totalNegative],
              backgroundColor: [
                'rgba(52, 168, 83, 0.7)',
                'rgba(234, 67, 53, 0.7)'
              ],
              borderColor: [
                'rgba(52, 168, 83, 1)',
                'rgba(234, 67, 53, 1)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: 'Positive vs Negative Activities'
              },
              legend: {
                position: 'bottom'
              }
            }
          }
        });
      }
      /**
       * Renders a horizontal bar chart showing activity frequency
       * @param {string} canvasId - The ID of the canvas element
       * @param {Object} activityCounts - Map of activity names to count and positive/negative status
       * @param {string} timeframe - Label for the timeframe ("Lifetime" or "Previous Week")
       */
      function renderActivityFrequencyChart(canvasId, activityCounts, timeframe) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) {
          console.error(`Canvas element "${canvasId}" not found!`);
          return;
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          console.error(`Could not get 2D context for "${canvasId}"`);
          return;
        }
        
        // Check if we have data
        if (!activityCounts || Object.keys(activityCounts).length === 0) {
          showChartError(canvasId, `No activity data available for ${timeframe.toLowerCase()} period`);
          return;
        }
        
        console.log(`Rendering ${timeframe} activity frequency chart with ${Object.keys(activityCounts).length} activities`);
        
        // Process data
        const processedData = [];
        let totalActivities = 0;
        
        // Calculate total activities (only counting those with at least 1 occurrence)
        for (const activityName in activityCounts) {
          totalActivities += activityCounts[activityName].count;
        }
        
        console.log(`Total ${timeframe} activities count: ${totalActivities}`);
        
        // If no activities were found, handle this case specially 
        if (totalActivities === 0) {
          showChartError(canvasId, `No activities logged in this ${timeframe.toLowerCase()} period`);
          return;
        }
        
        // Convert to percentage and create processed data array
        for (const activityName in activityCounts) {
          const item = activityCounts[activityName];
          const percentage = totalActivities > 0 ? (item.count / totalActivities) * 100 : 0;
          
          // Add all activities to the data array, even those with 0 count
          processedData.push({
            name: activityName,
            percentage: Math.round(percentage * 10) / 10, // Round to 1 decimal
            positive: item.positive,
            count: item.count
          });
        }
        
        // Split into positive and negative activities
        const positiveActivities = processedData.filter(item => item.positive);
        const negativeActivities = processedData.filter(item => !item.positive);
        
        // Sort according to requirements:
        // 1. Most frequent positive activities (descending %)
        const frequentPositive = positiveActivities.filter(item => item.count > 0)
          .sort((a, b) => b.percentage - a.percentage);
        
        // 2. Least frequent positive activities (ascending % - these are the zeros)
        const rarePositive = positiveActivities.filter(item => item.count === 0)
          .sort((a, b) => a.name.localeCompare(b.name)); // Alphabetical order for zero-count items
        
        // 3. Least frequent negative activities (ascending %)
        const rareNegative = negativeActivities.filter(item => item.count === 0)
          .sort((a, b) => a.name.localeCompare(b.name)); // Alphabetical order for zero-count items
        
        // 4. Most frequent negative activities (descending %)
        const frequentNegative = negativeActivities.filter(item => item.count > 0)
          .sort((a, b) => b.percentage - a.percentage);
        
        // Combine sorted arrays according to the required sort order
        const sortedData = [...frequentPositive, ...rarePositive, ...rareNegative, ...frequentNegative];
        
        console.log(`${timeframe}: Positive activities with occurrences: ${frequentPositive.length}`);
        console.log(`${timeframe}: Positive activities with zero occurrences: ${rarePositive.length}`);
        console.log(`${timeframe}: Negative activities with occurrences: ${frequentNegative.length}`);
        console.log(`${timeframe}: Negative activities with zero occurrences: ${rareNegative.length}`);
        
        // Extract labels, percentages, and flags for chart data
        const sortedLabels = sortedData.map(item => item.name);
        const sortedPercentages = sortedData.map(item => item.percentage);
        const sortedPositiveFlags = sortedData.map(item => item.positive);
        const sortedCounts = sortedData.map(item => item.count);
        
        // Destroy existing chart if it exists
        if (charts[canvasId]) {
          charts[canvasId].destroy();
        }
        
        // Create new chart
        charts[canvasId] = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: sortedLabels,
            datasets: [{
              label: '% of Total Activities',
              data: sortedPercentages,
              backgroundColor: function(context) {
                const index = context.dataIndex;
                return sortedPositiveFlags[index] ? 'rgba(52, 168, 83, 0.7)' : 'rgba(234, 67, 53, 0.7)';
              },
              borderColor: function(context) {
                const index = context.dataIndex;
                return sortedPositiveFlags[index] ? 'rgba(52, 168, 83, 1)' : 'rgba(234, 67, 53, 1)';
              },
              borderWidth: 1
            }]
          },
          options: {
            indexAxis: 'y', // Horizontal bar chart
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: {
                title: {
                  display: true,
                  text: '% of Total Activities'
                },
                ticks: {
                  callback: function(value) {
                    return value + '%';
                  }
                },
                min: 0 // Start at 0
              },
              y: {
                // Limit the number of labels shown if there are too many
                ticks: {
                  autoSkip: true,
                  maxTicksLimit: 25
                }
              }
            },
            plugins: {
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const index = context.dataIndex;
                    let label = context.dataset.label || '';
                    if (label) {
                      label += ': ';
                    }
                    if (context.parsed.x !== null) {
                      label += context.parsed.x.toFixed(1) + '%';
                    }
                    label += ` (${sortedCounts[index]} occurrences)`;
                    return label;
                  }
                }
              },
              legend: {
                display: false // Hide legend since it's self-explanatory
              }
            }
          }
        });
      }
      function loadWeeklyGoals() {
        const goalsContainer = document.getElementById('weekly-goals-container');
        if (!goalsContainer) return;
        
        goalsContainer.innerHTML = '<p class="loading">Loading weekly goals data...</p>';
        
        google.script.run
          .withSuccessHandler(renderWeeklyGoals)
          .withFailureHandler(function(error) {
            console.error("Error loading weekly goals:", error);
            goalsContainer.innerHTML = `
              <div class="error-message">
                Failed to load weekly goals data: ${error.message || 'Unknown error'}
              </div>
            `;
          })
          .getWeeklyGoalsData();
      }

      function renderWeeklyGoals(data) {
        console.log("Weekly goals data received:", data);
        const goalsContainer = document.getElementById('weekly-goals-container');
        if (!goalsContainer) return;
        
        // Clear container
        goalsContainer.innerHTML = '';
        
        // Check if we have previous week data to compare
        if (!data.previousWeek.exists) {
          goalsContainer.innerHTML = `
            <div class="info-message">
              <p>No previous week data found to compare. Goals will be available next week!</p>
            </div>
          `;
          return;
        }
        
        // Create summary text
        const summaryDiv = document.createElement('div');
        summaryDiv.className = 'goals-summary';
        summaryDiv.innerHTML = `
          <p>Current Week: <strong>${data.currentWeek.total >= 0 ? '+' : ''}${data.currentWeek.total}</strong> points</p>
          <p>Previous Week: <strong>${data.previousWeek.total >= 0 ? '+' : ''}${data.previousWeek.total}</strong> points</p>
        `;
        goalsContainer.appendChild(summaryDiv);
        
        // Create goals list
        const goalsList = document.createElement('div');
        goalsList.className = 'goals-list';
        
        // Add each goal card
        Object.entries(data.goals).forEach(([goalKey, goal]) => {
          const goalCard = document.createElement('div');
          goalCard.className = `goal-card ${goal.achieved ? 'achieved' : ''}`;
          
          // Prepare text and colors
          const statusText = goal.achieved ? '✅ Achieved!' : 'In Progress';
          const statusClass = goal.achieved ? 'status-achieved' : 'status-pending';
          
          goalCard.innerHTML = `
            <div class="goal-header">
              <h4>${goal.description}</h4>
              <span class="goal-status ${statusClass}">${statusText}</span>
            </div>
            <div class="goal-details">
              <p>Target: ${goal.target >= 0 ? '+' : ''}${goal.target} points</p>
              <p>Current: ${goal.current >= 0 ? '+' : ''}${goal.current} points</p>
            </div>
            <div class="goal-progress">
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${goal.percentComplete}%"></div>
              </div>
              <span class="progress-text">${goal.percentComplete}% Complete</span>
            </div>
          `;
          
          goalsList.appendChild(goalCard);
        });
        
        goalsContainer.appendChild(goalsList);
      }

      function loadGoalHistory() {
        const historyContainer = document.getElementById('goal-history-container');
        if (!historyContainer) return;
        
        historyContainer.innerHTML = '<p class="loading">Loading goal history data...</p>';
        
        google.script.run
          .withSuccessHandler(renderGoalHistory)
          .withFailureHandler(function(error) {
            console.error("Error loading goal history:", error);
            historyContainer.innerHTML = `
              <div class="error-message">
                Failed to load goal history data: ${error.message || 'Unknown error'}
              </div>
            `;
          })
          .getGoalAchievementHistory();
      }

      function renderGoalHistory(data) {
        console.log("Goal history data received:", data);
        const historyContainer = document.getElementById('goal-history-container');
        if (!historyContainer) return;
        
        // Clear container
        historyContainer.innerHTML = '';
        
        // Check if we have enough data
        if (!data.weeklyTotals || data.weeklyTotals.length === 0) {
          historyContainer.innerHTML = `
            <div class="info-message">
              <p>Not enough weekly data available yet to show goal achievement history. At least two weeks of data are needed.</p>
            </div>
          `;
          return;
        }
        
        // Create achievement summary cards
        const summaryDiv = document.createElement('div');
        summaryDiv.className = 'achievement-summary';
        
        // Goal 1: Higher than previous
        const goal1Card = document.createElement('div');
        goal1Card.className = 'achievement-card';
        goal1Card.innerHTML = `
          <h4>Higher Point Total</h4>
          <div class="achievement-count">${data.goalAchievements.higherThanPrevious.totalAchieved}</div>
          <p>times achieved</p>
        `;
        summaryDiv.appendChild(goal1Card);
        
        // Goal 2: Double points
        const goal2Card = document.createElement('div');
        goal2Card.className = 'achievement-card';
        goal2Card.innerHTML = `
          <h4>Double Points</h4>
          <div class="achievement-count">${data.goalAchievements.doublePoints.totalAchieved}</div>
          <p>times achieved</p>
        `;
        summaryDiv.appendChild(goal2Card);
        
        historyContainer.appendChild(summaryDiv);
        
        // Create weekly totals chart
        const chartContainer = document.createElement('div');
        chartContainer.className = 'chart-container';
        chartContainer.style.height = '250px';
        chartContainer.style.marginTop = '20px';
        chartContainer.innerHTML = '<canvas id="weekly-totals-chart"></canvas>';
        historyContainer.appendChild(chartContainer);
        
        // Create achievement details if there are any
        if (data.goalAchievements.higherThanPrevious.totalAchieved > 0 || 
            data.goalAchievements.doublePoints.totalAchieved > 0) {
            
          const detailsDiv = document.createElement('div');
          detailsDiv.className = 'achievement-details';
          
          // Higher than previous details
          if (data.goalAchievements.higherThanPrevious.totalAchieved > 0) {
            const goal1Details = document.createElement('div');
            goal1Details.className = 'goal-details-section';
            goal1Details.innerHTML = `
              <h4>Higher Point Total Achievements</h4>
              <div class="achievement-weeks">
                ${data.goalAchievements.higherThanPrevious.achievedWeeks.map(week => `
                  <div class="achievement-week">
                    <div class="week-name">${week.week}</div>
                    <div class="week-improvement">+${week.improvement} pts</div>
                    <div class="week-comparison">${week.current} vs ${week.previous}</div>
                  </div>
                `).join('')}
              </div>
            `;
            detailsDiv.appendChild(goal1Details);
          }
          
          // Double points details
          if (data.goalAchievements.doublePoints.totalAchieved > 0) {
            const goal2Details = document.createElement('div');
            goal2Details.className = 'goal-details-section';
            goal2Details.innerHTML = `
              <h4>Double Points Achievements</h4>
              <div class="achievement-weeks">
                ${data.goalAchievements.doublePoints.achievedWeeks.map(week => `
                  <div class="achievement-week">
                    <div class="week-name">${week.week}</div>
                    <div class="week-improvement">${week.multiplier}x</div>
                    <div class="week-comparison">${week.current} vs ${week.previous}</div>
                  </div>
                `).join('')}
              </div>
            `;
            detailsDiv.appendChild(goal2Details);
          }
          
          historyContainer.appendChild(detailsDiv);
        }
        
        // Render the weekly totals chart
        renderWeeklyTotalsChart(data.weeklyTotals);
      }

      function renderWeeklyTotalsChart(weeklyTotals) {
        const ctx = document.getElementById('weekly-totals-chart');
        if (!ctx) return;
        
        // Extract labels and data
        const labels = weeklyTotals.map(week => week.week);
        const totals = weeklyTotals.map(week => week.total);
        const previousTotals = weeklyTotals.map(week => week.previousTotal);
        
        // Create the chart
        if (charts.weeklyTotalsChart) {
          charts.weeklyTotalsChart.destroy();
        }
        
        charts.weeklyTotalsChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [
              {
                label: 'Weekly Total',
                data: totals,
                backgroundColor: function(context) {
                  const value = context.dataset.data[context.dataIndex];
                  const previousValue = previousTotals[context.dataIndex];
                  
                  // Check if goal achieved
                  if (value >= previousValue * 2) {
                    return 'rgba(255, 159, 64, 0.7)'; // Orange for double points
                  } else if (value > previousValue) {
                    return 'rgba(52, 168, 83, 0.7)'; // Green for higher than previous
                  } else {
                    return 'rgba(66, 133, 244, 0.7)'; // Blue for no goal
                  }
                },
                borderColor: function(context) {
                  const value = context.dataset.data[context.dataIndex];
                  const previousValue = previousTotals[context.dataIndex];
                  
                  if (value >= previousValue * 2) {
                    return 'rgba(255, 159, 64, 1)';
                  } else if (value > previousValue) {
                    return 'rgba(52, 168, 83, 1)';
                  } else {
                    return 'rgba(66, 133, 244, 1)';
                  }
                },
                borderWidth: 1
              },
              {
                label: 'Previous Week',
                data: previousTotals,
                type: 'line',
                borderColor: 'rgba(153, 153, 153, 1)',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                borderWidth: 2,
                borderDash: [5, 5],
                pointRadius: 3
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                }
              },
              x: {
                grid: {
                  display: false
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Weekly Point Totals & Goal Achievements'
              },
              tooltip: {
                callbacks: {
                  afterLabel: function(context) {
                    const dataIndex = context.dataIndex;
                    const currentValue = totals[dataIndex];
                    const previousValue = previousTotals[dataIndex];
                    
                    let goals = [];
                    if (currentValue > previousValue) {
                      goals.push("✅ Higher than previous week");
                    }
                    if (currentValue >= previousValue * 2) {
                      goals.push("🔥 Double points achieved");
                    }
                    
                    return goals.length > 0 ? goals : ["No goals achieved"];
                  }
                }
              },
              legend: {
                position: 'top',
              }
            }
          }
        });
      }

      function renderStreaks(streakData) {
        // ADD THIS LINE:
        console.log("renderStreaks received data:", JSON.stringify(streakData)); // Log received data

        const container = document.getElementById('streaks-container');
        container.innerHTML = ''; // Clear previous content

        const buildingStreaks = streakData.buildingStreaks || {};
        const fullStreaks = streakData.streaks || {};

        // Check if any streaks exist
        if (Object.keys(buildingStreaks).length === 0 && Object.keys(fullStreaks).length === 0) {
          container.innerHTML = '<p>No active streaks found. Start logging activities consistently to build streaks!</p>';
          return;
        }

        // Sort streaks by length (descending)
        const sortedFullStreaks = Object.entries(fullStreaks)
          .sort(([, a], [, b]) => b - a);

        // Add full streaks (3+ days)
        sortedFullStreaks.forEach(([activity, days]) => {
          const card = document.createElement('div');
          let streakClass = 'streak-card';
          let emoji = '🔥';
          let bonusText = '';

          // Determine streak level (Use CONFIG values if possible, otherwise hardcode like below)
          const multiplierThreshold = 14; // Example: Get from CONFIG if available client-side
          const bonus2Threshold = 7;     // Example
          const bonus1Threshold = 3;     // Example
          const bonus2Points = 2;        // Example
          const bonus1Points = 1;        // Example

          if (days >= multiplierThreshold) {
            streakClass += ' multiplier';
            emoji = '🔥🔥🔥';
            bonusText = '2x Points Multiplier Active!';
          } else if (days >= bonus2Threshold) {
            streakClass += ' bonus2';
            emoji = '🔥🔥';
            bonusText = `+${bonus2Points} Bonus Points Active!`;
          } else if (days >= bonus1Threshold) {
            streakClass += ' bonus1';
            bonusText = `+${bonus1Points} Bonus Point Active!`;
          }

          card.className = streakClass;
          card.innerHTML = `
            <div style="display: flex; align-items: center;">
              <span class="streak-days">${days}</span>
              <span class="streak-emoji">${emoji}</span>
            </div>
            <div class="streak-activity">${activity}</div>
            <div class="streak-bonus">${bonusText}</div>
          `;

          container.appendChild(card);
        });

        // Add building streaks (2 days)
        Object.keys(buildingStreaks).forEach(activity => {
          const card = document.createElement('div');
          card.className = 'streak-card'; // Basic card style
          card.innerHTML = `
            <div style="display: flex; align-items: center;">
              <span class="streak-days">2</span>
              <span class="streak-emoji">💪</span>
            </div>
            <div class="streak-activity">${activity}</div>
            <div class="streak-bonus">Keep it up for a bonus!</div>
          `;

          container.appendChild(card);
        });
      }
      
      function showChartError(chartId, message) {
        const canvas = document.getElementById(chartId);
        if (!canvas) {
          console.error(`Canvas element "${chartId}" not found!`);
          return;
        }
        
        const container = canvas.parentElement;
        
        // Remove canvas
        canvas.remove();
        
        // Add error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        container.appendChild(errorDiv);
      }
      
      // Update handleDashboardError to include the new chart containers
      function handleDashboardError(error) {
        console.error('Dashboard error:', error);
        showNotification('Error loading dashboard data: ' + (error.message || 'Unknown error'));
        
        // Clear loading indicators and show error in each chart container
        document.querySelectorAll('.chart-container .loading').forEach(loading => {
          const container = loading.parentElement;
          loading.remove();
          
          const errorDiv = document.createElement('div');
          errorDiv.className = 'error-message';
          errorDiv.textContent = 'Failed to load chart data: ' + (error.message || 'Unknown error');
          container.appendChild(errorDiv);
        });
      }
      
      function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.classList.remove('hidden');
        
        // Hide after 3 seconds
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 3000);
      }
      
      function sendDailyDigest() {
        const emailBtn = document.getElementById('email-button');
        const mobileEmailBtn = document.getElementById('mobile-email-button');
        
        emailBtn.disabled = true;
        if (mobileEmailBtn) mobileEmailBtn.disabled = true;
        
        emailBtn.textContent = 'Sending...';
        if (mobileEmailBtn) mobileEmailBtn.textContent = 'Sending...';
        
        google.script.run
          .withSuccessHandler(function(result) {
            emailBtn.disabled = false;
            if (mobileEmailBtn) mobileEmailBtn.disabled = false;
            
            emailBtn.textContent = 'Send Daily Digest';
            if (mobileEmailBtn) mobileEmailBtn.textContent = 'Send Daily Digest';
            
            if (result.success) {
              showNotification(result.message);
            } else {
              showNotification('Error: ' + result.message);
            }
          })
          .withFailureHandler(function(error) {
            emailBtn.disabled = false;
            if (mobileEmailBtn) mobileEmailBtn.disabled = false;
            
            emailBtn.textContent = 'Send Daily Digest';
            if (mobileEmailBtn) mobileEmailBtn.textContent = 'Send Daily Digest';
            
            showNotification('Error: ' + (error.message || 'Failed to send email'));
          })
          .forceSendDailyDigest();
      }
    </script>
  </body>
</html>
