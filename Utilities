// Utilities.gs
/**
 * Common utility functions for Budget Game v3 (Streamlined)
 */

/**
 * Calculates ISO 8601 week number for a given date.
 * Weeks start on Monday per ISO standard, but our game week starts Sunday.
 * We primarily use getWeekStartDate/EndDate for game logic.
 * @param {Date} date The date object.
 * @return {number} The ISO week number.
 */
function getISOWeekNumber(date) {
  const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
  const dayNum = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

/**
 * Gets the start date (Sunday 00:00:00) of the week for a given date.
 * @param {Date} date The date object.
 * @return {Date} The Date object for the start of the week (Sunday).
 */
function getWeekStartDate(date) {
  const d = new Date(date);
  d.setDate(d.getDate() - d.getDay()); // Sunday is day 0
  d.setHours(0, 0, 0, 0); // Set to the beginning of the day
  return d;
}

/**
 * Gets the end date (Saturday 23:59:59.999) of the week for a given date.
 * @param {Date} date The date object.
 * @return {Date} The Date object for the end of the week (Saturday).
 */
function getWeekEndDate(date) {
  const d = new Date(date);
  d.setDate(d.getDate() + (6 - d.getDay())); // Saturday is day 6
  d.setHours(23, 59, 59, 999); // Set to the end of the day
  return d;
}

/**
 * Formats a date object as YYYY-MM-DD string using the script's timezone.
 * Useful for consistent date comparisons.
 * @param {Date} date The date object.
 * @return {string} The formatted date string or "" if input is invalid.
 */
function formatDateYMD(date) {
  if (!(date instanceof Date) || isNaN(date.getTime())) {
      return "";
  }
  try {
    return Utilities.formatDate(date, Session.getScriptTimeZone(), CONFIG.DATE_FORMAT_YMD);
  } catch (e) {
    Logger.log(`Error formatting date ${date}: ${e}`);
    return "";
  }
}

/**
 * Retrieves the current streak settings from PropertiesService, falling back to CONFIG defaults.
 * Returns a consistent structure with both uppercase and lowercase property keys to support
 * both server and client-side code needs.
 * @return {object} The streak settings object with consistent key naming.
 */
function getCurrentStreakSettings() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const savedSettingsJson = scriptProperties.getProperty('STREAK_SETTINGS');

  // Define defaults directly from CONFIG
  const defaultSettings = {
    thresholds: {
      BONUS_1: CONFIG.STREAK_THRESHOLDS.BONUS_1,
      BONUS_2: CONFIG.STREAK_THRESHOLDS.BONUS_2,
      MULTIPLIER: CONFIG.STREAK_THRESHOLDS.MULTIPLIER,
      // Add lowercase versions for client-side consistency
      bonus1: CONFIG.STREAK_THRESHOLDS.BONUS_1,
      bonus2: CONFIG.STREAK_THRESHOLDS.BONUS_2,
      multiplier: CONFIG.STREAK_THRESHOLDS.MULTIPLIER
    },
    bonusPoints: {
      BONUS_1: CONFIG.STREAK_BONUS_POINTS.BONUS_1,
      BONUS_2: CONFIG.STREAK_BONUS_POINTS.BONUS_2,
      // Add lowercase versions for client-side consistency
      bonus1: CONFIG.STREAK_BONUS_POINTS.BONUS_1,
      bonus2: CONFIG.STREAK_BONUS_POINTS.BONUS_2
    }
  };

  if (savedSettingsJson) {
    try {
      const savedSettings = JSON.parse(savedSettingsJson);
      
      // Basic validation to ensure structure matches
      if (savedSettings && savedSettings.thresholds && savedSettings.bonusPoints &&
          ((typeof savedSettings.thresholds.BONUS_1 === 'number') || 
           (typeof savedSettings.thresholds.bonus1 === 'number'))) {
        
        // Create a new object with a consistent structure
        const normalizedSettings = {
          thresholds: {
            // Prioritize uppercase, fall back to lowercase if uppercase not available
            BONUS_1: savedSettings.thresholds.BONUS_1 ?? savedSettings.thresholds.bonus1 ?? defaultSettings.thresholds.BONUS_1,
            BONUS_2: savedSettings.thresholds.BONUS_2 ?? savedSettings.thresholds.bonus2 ?? defaultSettings.thresholds.BONUS_2,
            MULTIPLIER: savedSettings.thresholds.MULTIPLIER ?? savedSettings.thresholds.multiplier ?? defaultSettings.thresholds.MULTIPLIER,
            // Also add lowercase versions for client-side code
            bonus1: savedSettings.thresholds.BONUS_1 ?? savedSettings.thresholds.bonus1 ?? defaultSettings.thresholds.BONUS_1,
            bonus2: savedSettings.thresholds.BONUS_2 ?? savedSettings.thresholds.bonus2 ?? defaultSettings.thresholds.BONUS_2,
            multiplier: savedSettings.thresholds.MULTIPLIER ?? savedSettings.thresholds.multiplier ?? defaultSettings.thresholds.MULTIPLIER
          },
          bonusPoints: {
            BONUS_1: savedSettings.bonusPoints.BONUS_1 ?? savedSettings.bonusPoints.bonus1 ?? defaultSettings.bonusPoints.BONUS_1,
            BONUS_2: savedSettings.bonusPoints.BONUS_2 ?? savedSettings.bonusPoints.bonus2 ?? defaultSettings.bonusPoints.BONUS_2,
            // Also add lowercase versions
            bonus1: savedSettings.bonusPoints.BONUS_1 ?? savedSettings.bonusPoints.bonus1 ?? defaultSettings.bonusPoints.BONUS_1,
            bonus2: savedSettings.bonusPoints.BONUS_2 ?? savedSettings.bonusPoints.bonus2 ?? defaultSettings.bonusPoints.BONUS_2
          }
        };
        
        Logger.log("Using saved streak settings from PropertiesService (normalized).");
        return normalizedSettings;
      } else {
        Logger.log("Saved streak settings JSON structure invalid. Falling back to defaults.");
        return defaultSettings;
      }
    } catch (e) {
      Logger.log(`Error parsing saved streak settings: ${e}. Falling back to defaults.`);
      return defaultSettings;
    }
  } else {
    return defaultSettings;
  }
}
