// WebApp.gs
/**
 * Budget Game Web App Controller (Streamlined)
 * Handles serving the UI and acts as API layer between UI and backend logic.
 */

/**
 * Serves the web app HTML UI based on the page parameter.
 * @param {object} e The event parameter from the GET request.
 * @return {HtmlOutput} The HTML service output.
 */
function doGet(e) {
  const page = e.parameter.page;

  if (page === 'admin') {
    // Ensure admin access if needed (using helper from HouseholdManagement.gs)
    if (!isCurrentUserAdmin()) {
       return HtmlService.createHtmlOutput('Access Denied. Admin privileges required.');
    }
    return HtmlService.createTemplateFromFile('Admin')
      .evaluate()
      .setTitle('Budget Game Admin')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } else if (page === 'dashboard') {
    return HtmlService.createTemplateFromFile('Dashboard')
      .evaluate()
      .setTitle('Budget Game Dashboard')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }

  // Default to the activity tracker
  return HtmlService.createTemplateFromFile('ActivityTracker')
      .evaluate()
      .setTitle('Budget Game Tracker')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * Includes an HTML file content within another HTML file. Used for CSS.
 * @param {string} filename The name of the HTML file to include (e.g., 'Stylesheet').
 * @return {string} The HTML content of the included file.
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * Gets the script URL for use in HTML templates.
 * @return {string} The deployment URL of the web app.
 */
function getScriptUrl() {
  return ScriptApp.getService().getUrl();
}


// --- Functions Called by Client-Side JavaScript ---

/**
 * Gets all activity data from Points Reference sheet via cache AND the category list.
 * Called by ActivityTracker.html.
 * @return {Object} Object containing { activityData: { pointValues, categories }, categoriesList: Array<string> }.
 */
function getWebAppActivityData() {
  // getActivityDataCached is in DataProcessing.gs
  const activityData = getActivityDataCached();
  // Return both activity data and the category list from CONFIG
  return {
      activityData: activityData,
      categoriesList: CONFIG.CATEGORIES // Send the list to the client
  };
}

/**
 * Gets the current day's points and activities for the user's household
 * by reading the Dashboard sheet.
 * Called by ActivityTracker.html.
 * @return {Object} Current day totals and activities for the household { points, activities, householdId, householdName, members }.
 */
function getTodayData() {
  const today = new Date();
  const formattedDate = formatDateYMD(today); // Utility function

  // Get current user's email and household info
  const email = Session.getEffectiveUser().getEmail();
  const householdId = getUserHouseholdId(email); // From HouseholdManagement.gs
  let householdEmails = [];
  let householdName = null;

  if (householdId) {
    householdEmails = getHouseholdEmails(householdId); // From HouseholdManagement.gs
    householdName = getHouseholdName(householdId);   // From HouseholdManagement.gs
    Logger.log(`getTodayData: Found ${householdEmails.length} members in household ${householdId} for ${email}`);
  } else {
    householdEmails = [email]; // Use individual email if no household
    Logger.log(`getTodayData: No household found for ${email}, using individual data`);
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);

  let todayPoints = 0;
  const activitiesMap = new Map(); // Use a Map to deduplicate activities for display

  if (!dashboardSheet) {
      Logger.log("getTodayData: Dashboard sheet not found.");
      return { points: 0, activities: [], householdId: householdId, householdName: householdName, members: householdEmails };
  }

  const lastRow = dashboardSheet.getLastRow();
  if (lastRow > 1) {
    // Read Dashboard: Date(A), Points(B), Activities(C), Email(G)
    const data = dashboardSheet.getRange(2, 1, lastRow - 1, 7).getValues(); // A2:G<lastRow>

    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const rowDate = row[0];
      const rowEmail = row[6] || ""; // Email in Col G

      // Check date and household membership
      if (rowDate instanceof Date && formatDateYMD(rowDate) === formattedDate &&
          householdEmails.some(he => he.toLowerCase() === rowEmail.toLowerCase()))
      {
        todayPoints += Number(row[1]) || 0; // Sum points from Col B

        // Process activities string from Col C to get unique list for today
        const activitiesStr = row[2] || "";
        if (activitiesStr) {
          const activitiesList = activitiesStr.split(", ");
          activitiesList.forEach(activityEntry => {
            // Extract activity name (tolerant of optional streak text)
            const match = activityEntry.match(/[âž•âž–]\s(.+?)\s*(?:\(ðŸ”¥\d+\))?\s*\(/);
            if (match && match[1]) {
              const activityName = match[1].trim();
              if (!activitiesMap.has(activityName)) {
                  // Store basic info, points here might not reflect individual submission/streaks perfectly
                  // It's mainly for showing *what* was done today.
                  const pointsMatch = activityEntry.match(/\(([+-]\d+)\)/);
                  const points = pointsMatch ? parseInt(pointsMatch[1]) : 0;
                  activitiesMap.set(activityName, {
                      name: activityName,
                      points: points // Point value shown in the log string
                  });
              }
            }
          });
        }
      }
    }
  }

  const activities = Array.from(activitiesMap.values());
  Logger.log(`getTodayData result for ${email}: Points=${todayPoints}, Activities=${activities.length}`);

  return {
    points: todayPoints,
    activities: activities, // List of unique activities logged today by household
    householdId: householdId,
    householdName: householdName,
    members: householdEmails // Pass member emails for display
  };
}


/**
 * Gets the current week's data for the user's household by reading the Dashboard.
 * Also calculates weekly average based on past weeks' data from Dashboard.
 * Called by ActivityTracker.html.
 * @return {Object} Weekly totals and averages { weeklyTotal, positiveCount, negativeCount, topActivity, dailyAverage, weeklyAverage, householdId, householdName }.
 */
function getWeekData() {
  try {
    const email = Session.getEffectiveUser().getEmail();
    const householdId = getUserHouseholdId(email);
    let householdEmails = householdId ? getHouseholdEmails(householdId) : [email];
    Logger.log(`getWeekData: Fetching for household members: ${householdEmails.join(', ')}`);

    // Use getHouseholdWeeklyTotals (from DataProcessing.gs) which reads the Dashboard
    const currentWeekSummary = getHouseholdWeeklyTotals(householdEmails);

    const result = {
      weeklyTotal: currentWeekSummary.total,
      positiveCount: currentWeekSummary.positive, // Use calculated counts
      negativeCount: currentWeekSummary.negative,
      topActivity: currentWeekSummary.topActivity,
      dailyAverage: 0, // Calculated below
      weeklyAverage: 0, // Calculated below
      householdId: householdId,
      householdName: householdId ? getHouseholdName(householdId) : null
    };

    // Calculate average daily points for the current week
    const today = new Date();
    const weekStartDate = getWeekStartDate(today);
    if (result.weeklyTotal !== 0) {
      const daysPassed = Math.min(7, Math.floor((today - weekStartDate) / (1000 * 60 * 60 * 24)) + 1);
      if (daysPassed > 0) {
         result.dailyAverage = Math.round((result.weeklyTotal / daysPassed) * 10) / 10;
      }
    }

    // Calculate overall weekly average from past weeks (reading Dashboard)
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);
    if (dashboardSheet) {
        const lastRow = dashboardSheet.getLastRow();
        const weeklyTotalsMap = new Map(); // { weekStartDateStr: totalPoints }

        if (lastRow > 1) {
            const data = dashboardSheet.getRange(2, 1, lastRow - 1, 7).getValues(); // A:G
            data.forEach(row => {
                const dateObj = row[0];
                const rowEmail = row[6] || "";
                if (dateObj instanceof Date && dateObj.getTime() > 0 &&
                    householdEmails.some(he => he.toLowerCase() === rowEmail.toLowerCase())) {
                    const points = Number(row[1]) || 0;
                    const loopWeekStartDate = getWeekStartDate(dateObj);
                    const loopWeekStartDateStr = formatDateYMD(loopWeekStartDate);
                    // Exclude current week from average calculation
                    if (loopWeekStartDate < weekStartDate) {
                       weeklyTotalsMap.set(loopWeekStartDateStr, (weeklyTotalsMap.get(loopWeekStartDateStr) || 0) + points);
                    }
                }
            });
        }
        // Calculate average from the map
        let pastWeekSum = 0;
        let pastWeekCount = 0;
        weeklyTotalsMap.forEach(total => {
            pastWeekSum += total;
            pastWeekCount++;
        });
        if (pastWeekCount > 0) {
            result.weeklyAverage = Math.round((pastWeekSum / pastWeekCount) * 10) / 10;
        }
    } else {
        Logger.log("getWeekData: Dashboard sheet not found for weekly average calc.");
    }

    Logger.log(`getWeekData result: ${JSON.stringify(result)}`);
    return result;

  } catch (error) {
    Logger.log(`CRITICAL ERROR in getWeekData: ${error}\nStack: ${error.stack}`);
    return { weeklyTotal: 0, dailyAverage: 0, weeklyAverage: 0, householdId: null, householdName: null }; // Minimal default on error
  }
}

/**
 * Processes a Web App submission, logging data to the Dashboard sheet.
 * @param {Array<string>} activities - Array of selected activity names.
 * @return {Object} Result object { success, points, weeklyTotal, message, goalsUpdated? }.
 */
function processWebAppSubmission(activities) {
  if (!activities || !Array.isArray(activities) || activities.length === 0) {
    return { success: false, message: "No activities submitted" };
  }

  try {
    const activityData = getActivityDataCached(); // From DataProcessing.gs
    const timestamp = new Date();
    const email = Session.getEffectiveUser().getEmail();
    let totalPoints = 0;
    const processedActivities = [];

    activities.forEach(activityName => {
      if (activityName) {
        // processActivityWithPoints is in DataProcessing.gs
        const result = processActivityWithPoints(activityName, activityData);
        totalPoints += result.points;
        if (result.name) {
          processedActivities.push(result);
        }
      }
    });

    // Update Dashboard sheet directly
    // updateDashboard is in DataProcessing.gs
    updateDashboard(timestamp, email, processedActivities, totalPoints);
    Logger.log(`Dashboard updated via Web App submission from ${email}.`);

    // Get the updated weekly total for the user's household AFTER the update
    const weekData = getWeekData(); // Recalculate after update
    const updatedWeeklyTotal = weekData.weeklyTotal !== undefined ? weekData.weeklyTotal : 0;


    return {
      success: true,
      points: totalPoints, // Points from *this* submission
      weeklyTotal: updatedWeeklyTotal, // Updated total for the week for the household
      goalsUpdated: true, // Flag for client-side dashboard to potentially refresh goal display
      activities: processedActivities, // Details of activities in this submission
      message: `Successfully logged ${activities.length} activities`
    };
  } catch (error) {
    Logger.log(`Error in processWebAppSubmission: ${error}\nStack: ${error.stack}`);
    return {
      success: false,
      message: `Error processing submission: ${error.message}`
    };
  }
}


// Place this function inside WebApp.gs

/**
 * Gets configuration settings for the admin panel, including CURRENT streak settings
 * retrieved from PropertiesService or defaults.
 * Called by Admin.html.
 * @return {Object} Config settings { pointsReference, streakSettings, categories }.
 */
function getAdminConfigData() {
  // Ensure admin access
  if (!isCurrentUserAdmin()) { // Assumes isCurrentUserAdmin is defined (likely in HouseholdManagement.gs)
     throw new Error("Admin privileges required.");
  }

  // Get raw points data (assuming getPointsReferenceData is defined, likely in DataProcessing.gs)
  const pointsRefData = getPointsReferenceData();

  // Get the *current* streak settings (persistent or default) using the helper
  const currentStreakSettings = getCurrentStreakSettings();

  // Return data needed by the Admin UI
  return {
    pointsReference: pointsRefData,        // Raw data [{activity, points, category}, ...]
    streakSettings: currentStreakSettings, // Current settings { thresholds: {BONUS_1,..}, bonusPoints: {BONUS_1,..} }
    categories: CONFIG.CATEGORIES          // List of valid category strings
  };
}


/**
 * Saves updated activities to Points Reference sheet.
 * Called by Admin.html.
 * @param {Array<object>} activities - Array of activity objects { activity, points, category }.
 * @return {Object} Result object { success, message }.
 */
function saveActivitiesData(activities) {
   // Ensure admin access
   if (!isCurrentUserAdmin()) {
      return { success: false, message: "Admin privileges required." };
   }
  if (!activities || !Array.isArray(activities)) {
    return { success: false, message: "Invalid activities data" };
  }

  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEET_NAMES.POINTS_REFERENCE);

    if (!sheet) {
       // Try to create it if it's missing
       setupPointsReferenceSheet();
       sheet = ss.getSheetByName(CONFIG.SHEET_NAMES.POINTS_REFERENCE);
       if (!sheet) return { success: false, message: "Points Reference sheet could not be found or created." };
    }

    // Clear existing data (except header)
    const lastRow = sheet.getLastRow();
    if (lastRow > 1) {
      sheet.getRange(2, 1, lastRow - 1, 3).clearContent();
    }

    // Write new data if any exists
    if (activities.length > 0) {
      const newData = activities.map(activity => [
        activity.activity || "", // Ensure values are not undefined/null
        activity.points || 0,
        activity.category || CONFIG.CATEGORIES[0] || "Uncategorized" // Default category
      ]);
      sheet.getRange(2, 1, newData.length, 3).setValues(newData);
      // Sort after writing
      sheet.getRange(2, 1, newData.length, 3).sort([{column: 3, ascending: true}, {column: 1, ascending: true}]);
    }

    // Clear cache to force refresh
    CacheService.getScriptCache().remove('activityData');
    activityDataCache = null;

    // Update Google form
    updateFormFromSheet(); // From FormSync.gs

    return {
      success: true,
      message: `Saved ${activities.length} activities successfully`
    };
  } catch (error) {
    Logger.log(`Error saving activities: ${error}\nStack: ${error.stack}`);
    return { success: false, message: `Error saving: ${error.message}` };
  }
}

/**
 * Saves updated streak settings to PropertiesService for persistence.
 * Called by Admin.html.
 * @param {Object} settings - Streak settings object.
 * @return {Object} Result object { success, message }.
 */
function saveStreakSettings(settings) {
   if (!isCurrentUserAdmin()) { 
     return { success: false, message: "Admin privileges required." }; 
   }
   
   // --- Input Validation ---
   if (!settings || typeof settings !== 'object' ||
       !settings.thresholds || typeof settings.thresholds !== 'object' ||
       !settings.bonusPoints || typeof settings.bonusPoints !== 'object') {
      return { success: false, message: "Invalid settings data format received." };
   }
   
   // Check for either uppercase or lowercase keys
   const hasBonusThresholds = 
     (typeof settings.thresholds.BONUS_1 === 'number' || typeof settings.thresholds.bonus1 === 'number') &&
     (typeof settings.thresholds.BONUS_2 === 'number' || typeof settings.thresholds.bonus2 === 'number') &&
     (typeof settings.thresholds.MULTIPLIER === 'number' || typeof settings.thresholds.multiplier === 'number');
     
   const hasBonusPoints =
     (typeof settings.bonusPoints.BONUS_1 === 'number' || typeof settings.bonusPoints.bonus1 === 'number') &&
     (typeof settings.bonusPoints.BONUS_2 === 'number' || typeof settings.bonusPoints.bonus2 === 'number');
   
   if (!hasBonusThresholds || !hasBonusPoints) {
     return { success: false, message: "Missing required streak settings values." };
   }
   // --- End Validation ---

   try {
       // Prepare a normalized object to save
       // Always use UPPERCASE for server-side persistence to avoid confusion
       const settingsToSave = {
           thresholds: {
               BONUS_1: parseInt(settings.thresholds.BONUS_1 ?? settings.thresholds.bonus1),
               BONUS_2: parseInt(settings.thresholds.BONUS_2 ?? settings.thresholds.bonus2),
               MULTIPLIER: parseInt(settings.thresholds.MULTIPLIER ?? settings.thresholds.multiplier)
           },
           bonusPoints: {
               BONUS_1: parseInt(settings.bonusPoints.BONUS_1 ?? settings.bonusPoints.bonus1),
               BONUS_2: parseInt(settings.bonusPoints.BONUS_2 ?? settings.bonusPoints.bonus2)
           }
       };

       const scriptProperties = PropertiesService.getScriptProperties();
       scriptProperties.setProperty('STREAK_SETTINGS', JSON.stringify(settingsToSave));
       Logger.log(`Saved streak settings to PropertiesService: ${JSON.stringify(settingsToSave)}`);

       // Clear any caches that might depend on streak settings
       resetActivityDataCache();

       return {
           success: true,
           message: "Streak settings saved successfully." // Message reflects persistence
       };
   } catch (error) {
       Logger.log(`Error saving streak settings to PropertiesService: ${error}\nStack: ${error.stack}`);
       return { success: false, message: `Error saving settings: ${error.message}` };
   }
}

// In WebApp.gs - Modify the getHistoricalData function

// Place this function inside WebApp.gs

function getHistoricalData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboardSheet = ss.getSheetByName(CONFIG.SHEET_NAMES.DASHBOARD);
  // Default structure including a place for streak settings
  const defaultResult = {
    success: false, 
    message: "Dashboard sheet not found", 
    dailyData: [], 
    weeklyData: [],
    streakData: { buildingStreaks: {}, streaks: {} }, 
    movingAverages: [],
    lifetimeActivityCounts: {}, 
    prevWeekActivityCounts: {}, 
    householdId: null, 
    householdName: null,
    currentStreakSettings: null // Field for settings
  };

  if (!dashboardSheet) {
     Logger.log("getHistoricalData Error: Dashboard sheet not found.");
    return defaultResult;
  }

  // -- Get and normalize the current streak settings --
  const currentStreakSettings = getCurrentStreakSettings();
  // Log to help with debugging
  Logger.log("Streak settings retrieved for dashboard: " + JSON.stringify(currentStreakSettings));

  // Get current user's email and household
  const email = Session.getEffectiveUser().getEmail();
  const householdId = getUserHouseholdId(email);
  let householdEmails = [];
  if (householdId) {
    householdEmails = getHouseholdEmails(householdId);
  } else {
    householdEmails = [email]; // Use individual email if no household
  }
  Logger.log(`getHistoricalData: Fetching for household members: ${householdEmails.join(', ')}`);

  // Get daily data from dashboard, aggregated for the household
  const lastRow = dashboardSheet.getLastRow();
  const dailyDataMap = new Map(); // Use map for aggregation { dateStr: { date, displayDate, points } }
  
  // Track activity details per day for more accurate positive/negative counts
  const dailyActivitiesMap = new Map(); // { dateStr: { positiveCount: number, negativeCount: number, activities: [] } }

  if (lastRow > 1) {
    // Read Dashboard: Date(A), Points(B), Activities(C), PosCount(D), NegCount(E), Email(G)
    const data = dashboardSheet.getRange(2, 1, lastRow - 1, 7).getValues(); // A2:G<lastRow>
    const timezone = Session.getScriptTimeZone();

    data.forEach(row => {
      const dateObj = row[0];
      const rowEmail = row[6] || ""; // Email in Col G

      if (dateObj instanceof Date && dateObj.getTime() > 0 &&
          householdEmails.some(he => he.toLowerCase() === rowEmail.toLowerCase()))
      {
        const dateStr = formatDateYMD(dateObj);
        const points = Number(row[1]) || 0;
        const activities = row[2] || "";
        
        // For daily points total
        if (!dailyDataMap.has(dateStr)) {
          dailyDataMap.set(dateStr, {
            date: dateStr,
            displayDate: Utilities.formatDate(dateObj, timezone, "MMM d"), // Format for charts
            points: 0
          });
        }
        dailyDataMap.get(dateStr).points += points;
        
        // For positive/negative activity counting
        if (!dailyActivitiesMap.has(dateStr)) {
          dailyActivitiesMap.set(dateStr, {
            positiveCount: 0,
            negativeCount: 0,
            activities: []
          });
        }
        
        // Process activities string to count positive/negative more accurately
        if (activities) {
          const dailyActivities = dailyActivitiesMap.get(dateStr);
          const activitiesList = activities.split(", ");
          
          activitiesList.forEach(activityEntry => {
            // Improved regex to extract activity and its sign
            const match = activityEntry.match(/([âž•âž–])\s(.+?)\s*(?:\(ðŸ”¥\d+\))?\s*\(([+-]\d+)\)/);
            if (match) {
              const sign = match[1]; // âž• or âž–
              const activityName = match[2].trim();
              const pointsStr = match[3]; // +X or -X
              
              // Count positive and negative based on the actual sign in the activity log
              if (sign === "âž•") {
                dailyActivities.positiveCount++;
              } else if (sign === "âž–") {
                dailyActivities.negativeCount++;
              }
              
              // Also store the activity name for later aggregation
              dailyActivities.activities.push({
                name: activityName,
                positive: sign === "âž•"
              });
            }
          });
        }
      }
    });
  }
  const dailyData = Array.from(dailyDataMap.values()).sort((a, b) => a.date.localeCompare(b.date));

  // Get weekly data aggregated from daily data - now with improved positive/negative counts
  const weeklyDataMap = new Map(); // { weekStartDateStr: { startDate, displayDate, totalPoints, ... } }
  dailyData.forEach(day => {
      const weekStartDate = getWeekStartDate(new Date(day.date + 'T00:00:00')); // Ensure correct date parsing
      const weekStartDateStr = formatDateYMD(weekStartDate);
      if (!weeklyDataMap.has(weekStartDateStr)) {
          weeklyDataMap.set(weekStartDateStr, {
              startDate: weekStartDateStr,
              displayDate: Utilities.formatDate(weekStartDate, Session.getScriptTimeZone(), "MMM d, yyyy"),
              totalPoints: 0,
              positiveCount: 0,
              negativeCount: 0,
              dailyBreakdown: { sunday: 0, monday: 0, tuesday: 0, wednesday: 0, thursday: 0, friday: 0, saturday: 0 }
          });
      }
      const weekEntry = weeklyDataMap.get(weekStartDateStr);
      weekEntry.totalPoints += day.points;
      
      // Populate dailyBreakdown based on the day's date
      const dayOfWeek = new Date(day.date + 'T00:00:00').getDay(); // 0=Sun, 6=Sat
      const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
      weekEntry.dailyBreakdown[dayKeys[dayOfWeek]] += day.points;
      
      // Add positive/negative counts from the daily activities tracking
      const dailyActivities = dailyActivitiesMap.get(day.date);
      if (dailyActivities) {
        weekEntry.positiveCount += dailyActivities.positiveCount;
        weekEntry.negativeCount += dailyActivities.negativeCount;
      }
  });
  const weeklyData = Array.from(weeklyDataMap.values()).sort((a, b) => a.startDate.localeCompare(b.startDate));

  // Get streak data for the household
  let streakData = { buildingStreaks: {}, streaks: {} };
  try {
     if (householdId && CONFIG.HOUSEHOLD_SETTINGS.ENABLED && typeof trackActivityStreaksForHousehold === "function") {
        streakData = trackActivityStreaksForHousehold(householdId) || { buildingStreaks: {}, streaks: {} };
     } else if (typeof trackActivityStreaks === "function"){
        streakData = trackActivityStreaks(); // Fallback for non-household or missing function
     }
  } catch (e) { Logger.log(`Error getting streak data: ${e}`); }

  // Calculate moving average for daily points
  const movingAverages = calculateMovingAverages(dailyData, 7);

  // Get lifetime and previous week counts with improved implementation
  const lifetimeCounts = getEnhancedLifetimeActivityCounts(householdEmails);
  const prevWeekCounts = getEnhancedPreviousWeekActivityCounts(householdEmails);

  return {
    success: true,
    dailyData: dailyData,
    weeklyData: weeklyData.map(week => ({
      ...week,
      positiveCount: week.positiveCount || 0,
      negativeCount: week.negativeCount || 0
    })),
    streakData: streakData,
    movingAverages: movingAverages,
    lifetimeActivityCounts: lifetimeCounts,
    prevWeekActivityCounts: prevWeekCounts,
    householdId: householdId,
    householdName: householdId ? getHouseholdName(householdId) : null,
    currentStreakSettings: currentStreakSettings // Include the normalized settings
  };
}

/**
 * Gets data for the two specific weekly goals based on Dashboard history.
 * Called by Dashboard.html.
 * @return {Object} Goal status object { higherThanPrevious: {...}, doublePoints: {...} }.
 */
function getWeeklyGoalsData() {
  // Ensure admin access is NOT required for users to see their own goals
  const email = Session.getEffectiveUser().getEmail();
  const householdId = getUserHouseholdId(email); // Get household ID for potential filtering

  // calculateDashboardGoalStatus is in DashboardGoalChecker.gs
  return calculateDashboardGoalStatus(householdId); // Pass householdId
}

/**
 * Gets all households data for admin display.
 * Called by Admin.html.
 * @return {Array} Array of household data objects.
 */
// function getHouseholdAdminData() { ... } // Already defined in HouseholdManagement.gs

/**
 * Adds a new household.
 * Called by Admin.html.
 * @param {string} name - Household name.
 * @param {string} userEmail - Initial member email.
 * @return {Object} Result object.
 */
// function addHousehold(name, userEmail) { ... } // Already defined in HouseholdManagement.gs

/**
 * Adds a user to a household.
 * Called by Admin.html.
 * @param {string} householdId - Household ID.
 * @param {string} userEmail - Email to add.
 * @return {Object} Result object.
 */
// function addUserToHousehold(householdId, userEmail) { ... } // Already defined in HouseholdManagement.gs

/**
 * Removes a user from a household.
 * Called by Admin.html.
 * @param {string} householdId - Household ID.
 * @param {string} userEmail - Email to remove.
 * @return {Object} Result object.
 */
// function removeUserFromHousehold(householdId, userEmail) { ... } // Already defined in HouseholdManagement.gs

/**
 * Deletes a household.
 * Called by Admin.html.
 * @param {string} householdId - Household ID to delete.
 * @return {Object} Result object.
 */
// function deleteHousehold(householdId) { ... } // Already defined in HouseholdManagement.gs


/**
 * Forces sending the daily digest email.
 * Called by buttons in ActivityTracker.html and Dashboard.html.
 * @return {Object} Result with success status and message.
 */
function forceSendDailyDigest() {
  try {
    // sendDailyDigest is in EmailService.gs
    const result = sendDailyDigest();
    return {
      success: result,
      message: result ? "Daily digest email sent successfully" : "Failed to send daily digest"
    };
  } catch (error) {
    Logger.log(`Error forcing daily digest: ${error}\nStack: ${error.stack}`);
    return {
      success: false,
      message: `Error sending email: ${error.message}`
    };
  }
}

// Add this function to WebApp.gs

/**
 * Gets historical goal achievement data for the calling user's household.
 * Wrapper function callable from the client-side.
 * @return {Object} Data about goal achievements over time.
 */
function getGoalAchievementHistory() {
  // Get current user's household ID
  const email = Session.getEffectiveUser().getEmail();
  const householdId = getUserHouseholdId(email); // From HouseholdManagement.gs

  // Call the main calculation function (in DataProcessing.gs)
  // Pass the householdId so it calculates for the correct group (or individual if null)
  return calculateGoalAchievementHistory(householdId);
}
